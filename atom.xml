<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>UerLink_Blog</title>
  
  
  <link href="http://uerlink.github.io/atom.xml" rel="self"/>
  
  <link href="http://uerlink.github.io/"/>
  <updated>2025-08-30T17:22:31.156Z</updated>
  <id>http://uerlink.github.io/</id>
  
  <author>
    <name>UerLink</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>电子学会python一级知识笔记</title>
    <link href="http://uerlink.github.io/2025/08/31/%E6%96%87%E6%A1%A3%E5%8C%BA/2025/2025-08-31_%E7%94%B5%E5%AD%90%E5%AD%A6%E4%BC%9Apython%E4%B8%80%E7%BA%A7%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0/"/>
    <id>http://uerlink.github.io/2025/08/31/%E6%96%87%E6%A1%A3%E5%8C%BA/2025/2025-08-31_%E7%94%B5%E5%AD%90%E5%AD%A6%E4%BC%9Apython%E4%B8%80%E7%BA%A7%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0/</id>
    <published>2025-08-30T16:00:00.000Z</published>
    <updated>2025-08-30T17:22:31.156Z</updated>
    
    <content type="html"><![CDATA[<h2 id="中国电子学会青少年软件编程等级考试"><a class="markdownIt-Anchor" href="#中国电子学会青少年软件编程等级考试"></a> 中国电子学会青少年软件编程等级考试</h2><p>官网：<a href="http://www.qceit.org.cn">www.qceit.org.cn</a></p><h2 id="编程环境"><a class="markdownIt-Anchor" href="#编程环境"></a> 编程环境</h2><h3 id="python语言的特点"><a class="markdownIt-Anchor" href="#python语言的特点"></a> python语言的特点</h3><ol><li>python是<strong>面向对象</strong>的程序设计语言</li><li>python支持<strong>多个操作系统</strong>的</li><li>python是一种<strong>动态数据类型</strong>程序设计语言</li><li>python是一种<strong>解释型</strong>程序设计语言</li></ol><h4 id="名词解释"><a class="markdownIt-Anchor" href="#名词解释"></a> 名词解释</h4><p><strong>解释器</strong>：Python解释器是一种执行Python代码的软件程序，负责逐行读取、解析并执行用户编写的Python指令，将代码编译为字节码后执行</p><p><strong>编译器</strong>：编译器是将高级语言源代码**（如C/C++）<strong>一次性翻译为机器可执行的低级语言目标代码</strong>（机器码/汇编）的程序</p><p><strong>调试器</strong>：用于基础断点调试，（内置pdb）</p><p><strong>集成开发环境</strong>：又称为IDE，是为开发者提供的一体化软件套件，集成编码、调试、编译、版本控制等工具</p><p><strong>开发环境</strong>：开发环境是涵盖软件开发全流程所需工具与资源的集合，包括硬件、操作系统、语言工具链、协作系统等</p><h3 id="python安装与版本"><a class="markdownIt-Anchor" href="#python安装与版本"></a> python安装与版本</h3><h4 id="python2与python3"><a class="markdownIt-Anchor" href="#python2与python3"></a> python2与python3</h4><ul><li><p>两个版本不兼容，2.x版本的代码需要修改才能在3.x版本上运行</p></li><li><p>目前python的发展方向向着3.x.x的方向发展</p></li><li><p>查询版本号：python -V （V需要大写）</p></li></ul><h5 id="32位x86与64位x64"><a class="markdownIt-Anchor" href="#32位x86与64位x64"></a> 32位（x86）与64位（x64）</h5><p>多少多少位是指CPU能同时处理多少位的数据，例如64位就2^64</p><h4 id="2安装python"><a class="markdownIt-Anchor" href="#2安装python"></a> 2.安装python</h4><p>官网：<a href="http://www.python.org">www.python.org</a></p><h3 id="常见开发环境"><a class="markdownIt-Anchor" href="#常见开发环境"></a> 常见开发环境</h3><ol><li>海龟编辑器</li><li>Mu Editor</li><li>Visual Studio code</li><li>Jupyter Notebook</li><li>PrCharm</li><li><strong>IDLE</strong></li><li>…</li></ol><h3 id="idle编辑器"><a class="markdownIt-Anchor" href="#idle编辑器"></a> IDLE编辑器</h3><p>IDLE是安装python后自带编辑器</p><h4 id="idle需要掌握的操作"><a class="markdownIt-Anchor" href="#idle需要掌握的操作"></a> IDLE需要掌握的操作</h4><ol><li>新建文件</li><li>保存文件</li><li>编辑代码</li><li>运行代码</li><li>会切换模式</li></ol><p>（<strong>需要自己多多练习</strong>）</p><h4 id="idle的两种模式"><a class="markdownIt-Anchor" href="#idle的两种模式"></a> IDLE的两种模式</h4><ol><li>【Shell】命令行模式：用于逐行执行代码。</li><li>【Edit】编辑模式：用于编写多行的程序，需要保存文件。<br />程序编写基本的方法</li></ol><h4 id="格式要求"><a class="markdownIt-Anchor" href="#格式要求"></a> 格式要求</h4><ol><li>缩进用来表示代码执行的层级关系（每级缩进<strong>使用4个空格</strong>）</li><li>单行长度尽量不超过79个字符，超长时用括号换行，并对齐首字符或使用4空格悬挂缩进</li></ol><pre class="highlight"><code class="hljs python"><span class="hljs-comment"># 括号内换行对齐</span><br>result = (value1 + value2 <br>          - value3)<br></code></pre><ol start="3"><li><p>运算符两侧尽量加空格：x = y + 1</p></li><li><p>单行注释：用 # 开头   # 注释内容</p></li><li><p>多行注释:</p><pre class="highlight"><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a, b</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;计算两数之和。</span><br><span class="hljs-string">    参数:</span><br><span class="hljs-string">        a (int): 第一个加数</span><br><span class="hljs-string">        b (int): 第二个加数</span><br><span class="hljs-string">    返回:</span><br><span class="hljs-string">        int: 相加结果</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> a + b<br></code></pre></li><li><p>字符串标识：单引号（’  '）  双引号（&quot;    &quot;)  ，下面的特殊用法要分清！不要和多行注释混淆</p><pre class="highlight"><code class="hljs python">a =<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">使用 3 个双引号分别作为注释的开头和结尾</span><br><span class="hljs-string">可以一次性注释多行内容</span><br><span class="hljs-string">这里面的内容全部是注释内容</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></li><li><p>符号都要用英文的符号</p></li></ol><h2 id="编程基础"><a class="markdownIt-Anchor" href="#编程基础"></a> 编程基础</h2><h3 id="输出语句-print"><a class="markdownIt-Anchor" href="#输出语句-print"></a> 输出语句 print()</h3><p><strong>语法</strong>：<code>print(*objects, sep=' ', end='\n', file=sys.stdout, flush=False)</code></p><ul><li><strong><code>*objects</code></strong>：任意数量对象（自动转换为字符串输出）</li><li><strong><code>sep</code></strong>：对象间分隔符（默认空格），如<code>print(1, 2, sep=&quot;|&quot;)</code> → <code>1|2</code></li><li><strong><code>end</code></strong>：输出结束字符（默认换行），如<code>print(&quot;Hi&quot;, end=&quot;!&quot;)</code> → <code>Hi!</code>（不换行）</li><li><strong><code>file</code></strong>：输出目标（默认控制台），可重定向到文件：</li><li><strong><code>flush</code></strong>：强制刷新缓冲区（默认<code>False</code>），实时输出需设为<code>True</code>（如进度条）</li></ul><p><strong>简单用法</strong>：print(内容)</p><h4 id="格式化输出"><a class="markdownIt-Anchor" href="#格式化输出"></a> 格式化输出</h4><ol><li><p>连接符  <strong>+</strong></p><pre class="highlight"><code class="hljs python">a=<span class="hljs-string">&#x27;hi&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;小明&quot;</span> + a + <span class="hljs-string">&quot;你好&quot;</span>)<br></code></pre></li><li><p>匹配类型符  <strong>%</strong>   类似C语言</p><pre class="highlight"><code class="hljs python">name,age = <span class="hljs-string">&#x27;小明&#x27;</span>,<span class="hljs-number">12</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Name: %s, Age: %d, Score: %.1f&quot;</span> % (name, age, <span class="hljs-number">95.5</span>))<br></code></pre></li></ol><p>​%s 字符串</p><p>​%d 整数</p><p>​%.1f  浮点数（小数），数字表示保留小数点后多少位</p><ol start="3"><li><p>f-string（Python ≥3.6推荐），在字符串前加<code>f</code>，变量/表达式用<code>&#123;&#125;</code>嵌入：</p><pre class="highlight"><code class="hljs python">name = <span class="hljs-string">&quot;Alice&quot;</span>; age = <span class="hljs-number">25</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Name: <span class="hljs-subst">&#123;name&#125;</span>, Age: <span class="hljs-subst">&#123;age+<span class="hljs-number">5</span>&#125;</span>&quot;</span>)  <span class="hljs-comment"># 输出：Name: Alice, Age: 30</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Pi: <span class="hljs-subst">&#123;<span class="hljs-number">3.14159</span>:<span class="hljs-number">.2</span>f&#125;</span>&quot;</span>)           <span class="hljs-comment"># 保留2位小数：Pi: 3.14</span><br></code></pre></li></ol><h3 id="输入语句-input"><a class="markdownIt-Anchor" href="#输入语句-input"></a> 输入语句 input()</h3><p>**语法：**user_input = input(提示内容)</p><p>**注意：**用户输入的内容 <strong>始终为字符串类型</strong></p><p>查看数据类型的函数：type(数据)</p><p><strong>执行流程</strong>：</p><ol><li>程序暂停执行，等待用户输入；</li><li>用户按回车键后，输入内容以字符串形式返回；</li><li>程序继续执行后续代码</li></ol><h4 id="多值输入与分割处理"><a class="markdownIt-Anchor" href="#多值输入与分割处理"></a> 多值输入与分割处理</h4><p>若需一次输入多个数据，可用 <code>split()</code> 分割字符串，结合 <code>map()</code> 批量转换类型：</p><pre class="highlight"><code class="hljs python"><span class="hljs-comment"># 示例：输入 &quot;10 20 30&quot;，按空格分割并转为整数列表</span><br>nums = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;输入三个数（空格分隔）：&quot;</span>).split()))<br><br><span class="hljs-comment"># 或直接解包赋值</span><br>a, b, c = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">float</span>, <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;输入三个浮点数（逗号分隔）：&quot;</span>).split(<span class="hljs-string">&#x27;,&#x27;</span>))<br></code></pre><p><code>split()</code> 默认按空格分割，可指定分隔符如 <code>split(',')</code></p><h3 id="变量"><a class="markdownIt-Anchor" href="#变量"></a> 变量</h3><p><strong>变量的本质</strong></p><ul><li>变量是数据的标签（引用），指向内存中存储的值，无需声明类型，赋值即创建</li><li>动态类型：变量类型由赋予的值自动推断，可随时重新赋值为不同类型</li></ul><pre class="highlight"><code class="hljs python">x = <span class="hljs-number">10</span>        <span class="hljs-comment"># x 为整数（int）</span><br>x = <span class="hljs-string">&quot;Python&quot;</span>  <span class="hljs-comment"># 重新赋值为字符串（str）</span><br></code></pre><p><strong>变量作用域</strong></p><ul><li>局部变量：在函数内部定义，作用域仅限于函数内</li><li>全局变量：在函数外定义，需用 <code>global</code> 关键字在函数内修改</li></ul><pre class="highlight"><code class="hljs python">global_var = <span class="hljs-number">20</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">modify</span>():<br>    <span class="hljs-keyword">global</span> global_var<br>    global_var = <span class="hljs-number">30</span><br></code></pre><p><strong>赋值</strong></p><ul><li><p>单数据赋值 <code>a=1</code></p></li><li><p>多数据赋值 <code>a, b, c = 1, 2, &quot;text&quot;</code></p></li><li><p>链式赋值：<code>a = b = c = 0</code></p></li><li><p>快速交换变量值：<code>a, b = b, a</code></p></li></ul><p>注意：不要混淆 <code>=</code>（赋值）和 <code>==</code>（比较）</p><h4 id="变量名命名规则"><a class="markdownIt-Anchor" href="#变量名命名规则"></a> 变量名命名规则</h4><p><strong>强制规则</strong></p><ol><li><p>组成字符：字母（a-z, A-Z）、数字（0-9）、下划线 <code>_</code>，<strong>不能以数字开头</strong></p></li><li><p>区分大小写（如 <code>name</code> 和 <code>Name</code> 不同）</p></li><li><p>禁止使用<strong>关键字</strong>（如 <code>if</code>、<code>for</code>、<code>class</code>）</p></li></ol><pre class="highlight"><code class="hljs python"><span class="hljs-keyword">import</span> keyword<br><span class="hljs-built_in">print</span>(keyword.kwlist) <span class="hljs-comment"># 查看所有关键字/保留字</span><br></code></pre><p><strong>命名规范</strong></p><ul><li><p>变量名：小写字母 + 下划线分隔（蛇形命名法），如 <code>student_name</code></p></li><li><p>常量名：全大写，如 <code>MAX_SIZE</code></p></li><li><p>类名：首字母大写的驼峰式，如 <code>ClassName</code></p></li><li><p>避免：单字符名（除简单循环变量）、内置函数名（如 <code>list</code>、<code>str</code>）</p></li></ul><h4 id="数据类型"><a class="markdownIt-Anchor" href="#数据类型"></a> 数据类型</h4><p>向变量中存放的东西叫数据，Python 数据类型分为基本类型和复合类型，通过 <code>type()</code> 函数可查看类型。</p><ol><li><strong>基本数据类型</strong></li></ol><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">描述</th><th style="text-align:center">示例</th><th style="text-align:center">特性</th></tr></thead><tbody><tr><td style="text-align:center"><strong><code>int</code></strong></td><td style="text-align:center">整数（无大小限制）</td><td style="text-align:center"><code>x = 42</code></td><td style="text-align:center">支持算术运算</td></tr><tr><td style="text-align:center"><strong><code>float</code></strong></td><td style="text-align:center">浮点数（小数）</td><td style="text-align:center"><code>y = 3.14</code></td><td style="text-align:center">科学计数法（<code>2e5</code>）</td></tr><tr><td style="text-align:center"><strong><code>str</code></strong></td><td style="text-align:center">字符串（文本）</td><td style="text-align:center"><code>s = &quot;Hello&quot;</code></td><td style="text-align:center">支持切片、格式化</td></tr><tr><td style="text-align:center"><strong><code>bool</code></strong></td><td style="text-align:center">布尔值（逻辑值）</td><td style="text-align:center"><code>flag = True</code></td><td style="text-align:center">仅 <code>True</code>/<code>False</code></td></tr></tbody></table><ol start="2"><li><strong>复合数据类型</strong></li></ol><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">描述</th><th style="text-align:center">示例</th><th style="text-align:center">特性</th></tr></thead><tbody><tr><td style="text-align:center"><strong><code>list</code></strong></td><td style="text-align:center">有序集合</td><td style="text-align:center"><code>lst = [1, &quot;a&quot;, True]</code></td><td style="text-align:center">支持增删、切片</td></tr><tr><td style="text-align:center"><strong><code>tuple</code></strong></td><td style="text-align:center">不可变有序集合</td><td style="text-align:center"><code>tup = (1, 2, &quot;b&quot;)</code></td><td style="text-align:center">访问快，内存占用小</td></tr><tr><td style="text-align:center"><strong><code>set</code></strong></td><td style="text-align:center">无序唯一元素集合</td><td style="text-align:center"><code>s = &#123;1, 2, 3&#125;</code></td><td style="text-align:center">自动去重，支持集合运算</td></tr><tr><td style="text-align:center"><strong><code>dict</code></strong></td><td style="text-align:center">键值对映射</td><td style="text-align:center"><code>d = &#123;&quot;name&quot;: &quot;Alice&quot;&#125;</code></td><td style="text-align:center">键必须为不可变类型</td></tr></tbody></table><h4 id="字符串和数值型变量"><a class="markdownIt-Anchor" href="#字符串和数值型变量"></a> 字符串和数值型变量</h4><h5 id="数值型变量"><a class="markdownIt-Anchor" href="#数值型变量"></a> 数值型变量</h5><p>用于存储数字，分为整型（<code>int</code>）、浮点型（<code>float</code>）和复数型（<code>complex</code>）</p><p>常用操作：</p><ul><li><p>算术运算：<code>+</code>（加）、<code>-</code>（减）、<code>*</code>（乘）、<code>/</code>（除，返回浮点）、<code>//</code>（整除）、<code>%</code>（取余）、<code>**</code>（幂运算）</p></li><li><p>位运算：<code>|</code>（按位或）、<code>&amp;</code>（按位与）、<code>&lt;&lt;</code>（左移）等</p></li></ul><h5 id="字符串"><a class="markdownIt-Anchor" href="#字符串"></a> 字符串</h5><p>用于存储文本数据，由字符序列组成，用单引号（<code>''</code>）、双引号（<code>&quot;&quot;</code>）或三引号（<code>''' '''</code>）定义，用三引号定义跨行文本</p><p>常用操作：</p><ul><li><code>+</code> 拼接（<code>&quot;Hello&quot; + &quot;World&quot;</code>）</li><li><code>*</code> 重复（<code>&quot;Hi&quot; * 3 → &quot;HiHiHi&quot;</code>）</li><li>切片</li></ul><pre class="highlight"><code class="hljs python">s = <span class="hljs-string">&quot;Python&quot;</span><br><span class="hljs-built_in">print</span>(s[<span class="hljs-number">1</span>:<span class="hljs-number">4</span>])  <span class="hljs-comment"># 输出：yth（切片）</span><br></code></pre><h4 id="变量类型转换"><a class="markdownIt-Anchor" href="#变量类型转换"></a> 变量类型转换</h4><p>使用转换函数可以对数据进行转换</p><ul><li>int()</li><li>float()</li><li>str()</li><li>bool()</li><li>list()</li><li>tuple()</li><li>set()</li><li>dict()</li></ul><h5 id="转换函数详解"><a class="markdownIt-Anchor" href="#转换函数详解"></a> 转换函数详解</h5><p><strong><code>int(x)</code></strong></p><ul><li><p><strong>功能</strong>：将数字字符串、浮点数或布尔值转换为整数。</p><pre class="highlight"><code class="hljs python"><span class="hljs-built_in">int</span>(<span class="hljs-string">&quot;42&quot;</span>)      <span class="hljs-comment"># 42（字符串 → 整数）</span><br><span class="hljs-built_in">int</span>(<span class="hljs-number">3.99</span>)      <span class="hljs-comment"># 3（浮点数 → 整数，截断小数）</span><br><span class="hljs-built_in">int</span>(<span class="hljs-literal">True</span>)      <span class="hljs-comment"># 1（布尔值 → 整数）</span><br></code></pre></li></ul><p><strong><code>float(x)</code></strong></p><ul><li><p><strong>功能</strong>：将<strong>数字</strong>字符串、整数或布尔值转换为浮点数。</p><pre class="highlight"><code class="hljs python"><span class="hljs-built_in">float</span>(<span class="hljs-string">&quot;3.14&quot;</span>)  <span class="hljs-comment"># 3.14（字符串 → 浮点数）</span><br><span class="hljs-built_in">float</span>(<span class="hljs-number">5</span>)       <span class="hljs-comment"># 5.0（整数 → 浮点数）</span><br><span class="hljs-built_in">float</span>(<span class="hljs-literal">False</span>)   <span class="hljs-comment"># 0.0（布尔值 → 浮点数）</span><br></code></pre></li></ul><p><strong><code>str(x)</code></strong></p><ul><li><p><strong>功能</strong>：将任意类型（数值、列表、字典等）转换为字符串。</p><pre class="highlight"><code class="hljs python"><span class="hljs-built_in">str</span>(<span class="hljs-number">100</span>)       <span class="hljs-comment"># &quot;100&quot;（整数 → 字符串）</span><br><span class="hljs-built_in">str</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>])    <span class="hljs-comment"># &quot;[1, 2]&quot;（列表 → 字符串）</span><br></code></pre></li></ul><p><strong><code>bool(x)</code></strong></p><ul><li><p><strong>功能</strong>：将值转换为布尔值（<code>True</code>/<code>False</code>）。</p></li><li><p>规则：</p><ul><li><code>False</code>：空值（<code>0</code>、<code>&quot;&quot;</code>、<code>[]</code>、<code>&#123;&#125;</code>、<code>None</code>）。</li><li><code>True</code>：非空值（如 <code>1</code>、<code>&quot;abc&quot;</code>、<code>[1]</code>）。</li></ul><pre class="highlight"><code class="hljs python"><span class="hljs-built_in">bool</span>(<span class="hljs-number">0</span>)        <span class="hljs-comment"># False</span><br><span class="hljs-built_in">bool</span>(<span class="hljs-string">&quot;Hello&quot;</span>)  <span class="hljs-comment"># True</span><br>```[<span class="hljs-number">2</span>,<span class="hljs-number">6</span>](@ref)<br></code></pre></li></ul><p><strong>list(iterable)</strong></p><ul><li><p><strong>功能</strong>：将可迭代对象（字符串、元组、集合）转换为列表。</p><pre class="highlight"><code class="hljs python"><span class="hljs-built_in">list</span>(<span class="hljs-string">&quot;abc&quot;</span>)    <span class="hljs-comment"># [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]（字符串 → 列表）</span><br><span class="hljs-built_in">list</span>((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))   <span class="hljs-comment"># [1, 2]（元组 → 列表）</span><br>```[<span class="hljs-number">1</span>,<span class="hljs-number">5</span>](@ref)<br></code></pre></li></ul><p><strong>tuple(iterable)</strong></p><ul><li><p><strong>功能</strong>：将可迭代对象转换为元组。</p><pre class="highlight"><code class="hljs python"><span class="hljs-built_in">tuple</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>])  <span class="hljs-comment"># (1, 2)（列表 → 元组）</span><br>```[<span class="hljs-number">1</span>,<span class="hljs-number">5</span>](@ref)<br></code></pre></li></ul><p><strong>dict(iterable)</strong></p><ul><li><p><strong>功能</strong>：将键值对序列（列表元组、嵌套列表）转换为字典。</p><pre class="highlight"><code class="hljs python"><span class="hljs-built_in">dict</span>([(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">1</span>), (<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">2</span>)])  <span class="hljs-comment"># &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2&#125;</span><br>```[<span class="hljs-number">2</span>,<span class="hljs-number">6</span>](@ref)<br></code></pre></li></ul><h2 id="数学运算"><a class="markdownIt-Anchor" href="#数学运算"></a> 数学运算</h2><h3 id="运算符"><a class="markdownIt-Anchor" href="#运算符"></a> 运算符</h3><p>通过系统掌握这些运算符的分类及特性，可显著提升代码的简洁性与执行效率。建议结合具体场景（如数值计算、条件分支、数据结构操作）深化理解。</p><ol><li><strong>算数运算符</strong></li><li><strong>比较运算符</strong></li><li><strong>赋值运算符</strong></li><li><strong>逻辑运算符</strong></li><li>位运算符</li><li>成员运算符</li><li>身份运算符</li></ol><h4 id="算数运算符"><a class="markdownIt-Anchor" href="#算数运算符"></a> 算数运算符</h4><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">名称</th><th style="text-align:center">示例</th><th style="text-align:center">输出结果</th></tr></thead><tbody><tr><td style="text-align:center"><code>+</code></td><td style="text-align:center">加</td><td style="text-align:center"><code>5 + 3</code></td><td style="text-align:center"><code>8</code></td></tr><tr><td style="text-align:center"><code>-</code></td><td style="text-align:center">减</td><td style="text-align:center"><code>8 - 3</code></td><td style="text-align:center"><code>5</code></td></tr><tr><td style="text-align:center"><code>*</code></td><td style="text-align:center">乘</td><td style="text-align:center"><code>4 * 3</code></td><td style="text-align:center"><code>12</code></td></tr><tr><td style="text-align:center"><code>/</code></td><td style="text-align:center">除</td><td style="text-align:center"><code>10 / 2</code></td><td style="text-align:center"><code>5.0</code> (浮点数)</td></tr><tr><td style="text-align:center"><code>%</code></td><td style="text-align:center">取模</td><td style="text-align:center"><code>10 % 3</code></td><td style="text-align:center"><code>1</code></td></tr><tr><td style="text-align:center"><code>**</code></td><td style="text-align:center">幂运算</td><td style="text-align:center"><code>2 ** 3</code></td><td style="text-align:center"><code>8</code></td></tr><tr><td style="text-align:center"><code>//</code></td><td style="text-align:center">整除</td><td style="text-align:center"><code>10 // 3</code></td><td style="text-align:center"><code>3</code> (向下取整)</td></tr></tbody></table><p>注意：除号是这个斜杠  <strong>/</strong>  （向左划下） 不是   \</p><h4 id="赋值运算符"><a class="markdownIt-Anchor" href="#赋值运算符"></a> 赋值运算符</h4><p>为变量赋值或更新值</p><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">描述</th><th style="text-align:center">示例</th><th style="text-align:center">等价形式</th></tr></thead><tbody><tr><td style="text-align:center"><code>=</code></td><td style="text-align:center">简单赋值</td><td style="text-align:center"><code>x = 10</code></td><td style="text-align:center">-</td></tr><tr><td style="text-align:center"><code>+=</code></td><td style="text-align:center">加法赋值（自加）</td><td style="text-align:center"><code>x += 3</code></td><td style="text-align:center"><code>x = x + 3</code></td></tr><tr><td style="text-align:center"><code>-=</code></td><td style="text-align:center">减法赋值（自减）</td><td style="text-align:center"><code>x -= 2</code></td><td style="text-align:center"><code>x = x - 2</code></td></tr><tr><td style="text-align:center"><code>*=</code></td><td style="text-align:center">乘法赋值（自乘）</td><td style="text-align:center"><code>x *= 2</code></td><td style="text-align:center"><code>x = x * 2</code></td></tr><tr><td style="text-align:center"><code>/=</code></td><td style="text-align:center">除法赋值（自除）</td><td style="text-align:center"><code>x /= 4</code></td><td style="text-align:center"><code>x = x / 4</code></td></tr></tbody></table><h4 id="比较运算符"><a class="markdownIt-Anchor" href="#比较运算符"></a> <strong>比较运算符</strong></h4><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">名称</th><th style="text-align:center">示例</th><th style="text-align:center">结果</th></tr></thead><tbody><tr><td style="text-align:center"><code>==</code></td><td style="text-align:center">等于</td><td style="text-align:center"><code>5 == 5</code></td><td style="text-align:center"><code>True</code></td></tr><tr><td style="text-align:center"><code>!=</code></td><td style="text-align:center">不等于</td><td style="text-align:center"><code>5 != 3</code></td><td style="text-align:center"><code>True</code></td></tr><tr><td style="text-align:center"><code>&gt;</code></td><td style="text-align:center">大于</td><td style="text-align:center"><code>5 &gt; 3</code></td><td style="text-align:center"><code>True</code></td></tr><tr><td style="text-align:center"><code>&lt;</code></td><td style="text-align:center">小于</td><td style="text-align:center"><code>3 &lt; 5</code></td><td style="text-align:center"><code>True</code></td></tr><tr><td style="text-align:center"><code>&gt;=</code></td><td style="text-align:center">大于等于</td><td style="text-align:center"><code>5 &gt;= 5</code></td><td style="text-align:center"><code>True</code></td></tr><tr><td style="text-align:center"><code>&lt;=</code></td><td style="text-align:center">小于等于</td><td style="text-align:center"><code>3 &lt;= 5</code></td><td style="text-align:center"><code>True</code></td></tr></tbody></table><p>注意：</p><ul><li><p>比较值并返回布尔值（<code>True/False</code>）：</p></li><li><p><strong>应用</strong>：条件判断、循环控制</p></li></ul><h4 id="逻辑运算符"><a class="markdownIt-Anchor" href="#逻辑运算符"></a> 逻辑运算符</h4><p>组合布尔条件：</p><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">描述</th><th style="text-align:center">示例</th><th style="text-align:center">结果</th></tr></thead><tbody><tr><td style="text-align:center"><code>and</code></td><td style="text-align:center">与</td><td style="text-align:center"><code>True and False</code></td><td style="text-align:center"><code>False</code></td></tr><tr><td style="text-align:center"><code>or</code></td><td style="text-align:center">或</td><td style="text-align:center"><code>True or False</code></td><td style="text-align:center"><code>True</code></td></tr><tr><td style="text-align:center"><code>not</code></td><td style="text-align:center">非</td><td style="text-align:center"><code>not True</code></td><td style="text-align:center"><code>False</code></td></tr></tbody></table><ul><li><p><code>and</code>：一假即假（短路特性：左侧为假时跳过右侧计算）</p></li><li><p><code>or</code>：一真即真（左侧为真时跳过右侧计算）</p></li></ul><p>非布尔值规则：</p><ul><li><code>0 and 3</code> → <code>0</code>；<code>1 and 3</code> → <code>3</code></li><li><code>0 or 4</code> → <code>4</code>；<code>1 or 5</code> → <code>1</code></li></ul><p>位运算符</p><p>直接操作二进制位：</p><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">描述</th><th style="text-align:center">示例</th><th style="text-align:center">结果（二进制）</th></tr></thead><tbody><tr><td style="text-align:center"><code>&amp;</code></td><td style="text-align:center">按位与</td><td style="text-align:center"><code>9 &amp; 5</code></td><td style="text-align:center"><code>1 (00000001)</code></td></tr><tr><td style="text-align:center">`</td><td style="text-align:center">`</td><td style="text-align:center">按位或</td><td style="text-align:center">`9</td></tr><tr><td style="text-align:center"><code>^</code></td><td style="text-align:center">按位异或</td><td style="text-align:center"><code>9 ^ 5</code></td><td style="text-align:center"><code>12 (00001100)</code></td></tr><tr><td style="text-align:center"><code>~</code></td><td style="text-align:center">按位取反</td><td style="text-align:center"><code>~9</code></td><td style="text-align:center">补码结果</td></tr><tr><td style="text-align:center"><code>&lt;&lt;</code></td><td style="text-align:center">左移</td><td style="text-align:center"><code>9 &lt;&lt; 2</code></td><td style="text-align:center"><code>36 (00100100)</code></td></tr><tr><td style="text-align:center"><code>&gt;&gt;</code></td><td style="text-align:center">右移</td><td style="text-align:center"><code>9 &gt;&gt; 2</code></td><td style="text-align:center"><code>2 (00000010)</code></td></tr></tbody></table><p>成员运算符</p><p>检测元素是否在序列中：</p><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">描述</th><th style="text-align:center">示例</th><th style="text-align:center">结果</th></tr></thead><tbody><tr><td style="text-align:center"><code>in</code></td><td style="text-align:center">存在于序列</td><td style="text-align:center"><code>2 in [1, 2, 3]</code></td><td style="text-align:center"><code>True</code></td></tr><tr><td style="text-align:center"><code>not in</code></td><td style="text-align:center">不存在</td><td style="text-align:center"><code>&quot;a&quot; not in &quot;hello&quot;</code></td><td style="text-align:center"><code>True</code></td></tr><tr><td style="text-align:center"><strong>适用类型</strong>：列表、字符串、元组、字典（仅检测键）</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table><h4 id="运算符优先级"><a class="markdownIt-Anchor" href="#运算符优先级"></a> 运算符优先级</h4><p>从高到低：</p><ol><li><code>**</code>（幂运算）</li><li><code>~</code>、<code>+</code>、<code>-</code>（取反、正负号）</li><li><code>*</code>、<code>/</code>、<code>%</code>、<code>//</code></li><li><code>+</code>、<code>-</code></li><li><code>&lt;&lt;</code>、<code>&gt;&gt;</code>（位移）</li><li><code>&amp;</code>、<code>^</code>、<code>|</code>（位运算）</li><li><code>==</code>、<code>!=</code>、<code>&gt;</code>等（比较）</li><li><code>not</code>、<code>and</code>、<code>or</code>（逻辑）<br />​<strong>提示</strong>​：使用 <code>()</code> 显式指定优先级，如 <code>(2+3)*4</code></li></ol><h3 id="表达式"><a class="markdownIt-Anchor" href="#表达式"></a> 表达式</h3><p>Python表达式是由操作数（变量、常量、函数调用）和运算符组成的代码单元，用于计算或生成值</p><ol><li><strong>算数表达式</strong></li><li><strong>比较表达式</strong></li><li><strong>逻辑表达式</strong></li><li><strong>赋值表达式</strong></li><li>成员表达式</li><li>Lambda表达式</li><li>三元表达式</li><li>身份表达式</li><li>…</li></ol><p><strong>算数表达式</strong>：用于数值计算，返回数值结果</p><pre class="highlight"><code class="hljs python">result = <span class="hljs-number">10</span> + <span class="hljs-number">5</span> * <span class="hljs-number">2</span>   <span class="hljs-comment"># 结果为20（优先级：乘法先于加法）</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">9</span> % <span class="hljs-number">4</span>)          <span class="hljs-comment"># 取余，输出1</span><br></code></pre><p><strong>比较表达式</strong>：比较操作数并返回布尔值（<code>True/False</code>）</p><pre class="highlight"><code class="hljs python">a, b = <span class="hljs-number">5</span>, <span class="hljs-number">3</span><br><span class="hljs-built_in">print</span>(a &gt; b)  <span class="hljs-comment"># True</span><br></code></pre><p><strong>逻辑表达式</strong>：组合布尔值，返回布尔值或操作数</p><pre class="highlight"><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-literal">True</span> <span class="hljs-keyword">and</span> <span class="hljs-literal">False</span>)  <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">0</span> <span class="hljs-keyword">or</span> <span class="hljs-number">4</span>)          <span class="hljs-comment"># 4（非布尔值规则）</span><br></code></pre><p><strong>赋值表达式</strong>：</p><pre class="highlight"><code class="hljs python">x = <span class="hljs-number">10</span><br>x *= <span class="hljs-number">2</span>      <span class="hljs-comment"># x = 20</span><br></code></pre><p><strong>成员表达式</strong>：检测元素是否在容器中，<code>in</code>（存在）、<code>not in</code>（不存在）</p><pre class="highlight"><code class="hljs python">lst = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-number">2</span> <span class="hljs-keyword">in</span> lst)       <span class="hljs-comment"># True</span><br>dct = &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Alice&quot;</span>&#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> dct)  <span class="hljs-comment"># True（仅检查键）</span><br></code></pre><p><strong>三元表达式</strong>：</p><pre class="highlight"><code class="hljs python">max_val = a <span class="hljs-keyword">if</span> a &gt; b <span class="hljs-keyword">else</span> b  <span class="hljs-comment"># 返回a和b中的较大值</span><br></code></pre><p><strong>Lambda表达式</strong>：匿名函数</p><pre class="highlight"><code class="hljs python">add = <span class="hljs-keyword">lambda</span> x, y: x + y<br><span class="hljs-built_in">print</span>(add(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>))  <span class="hljs-comment"># 5</span><br></code></pre><h2 id="计算思维"><a class="markdownIt-Anchor" href="#计算思维"></a> 计算思维</h2><p>python一级需要掌握：</p><ul><li>编写顺序执行的程序</li><li>分析简单的逻辑运算</li><li>比较运算中的结果</li></ul><h3 id="程序流程图"><a class="markdownIt-Anchor" href="#程序流程图"></a> 程序流程图</h3><p>程序流程图又称<strong>程序框图</strong>，是用统一规定的标准符号描述程序运行具体步骤的图形表示。 程序框图的设计是在处理流程图的基础上，通过对输入输出数据和处理过程的详细分析，将计算机的主要运行步骤和内容标识出来。</p><h4 id="标准符号"><a class="markdownIt-Anchor" href="#标准符号"></a> <strong>标准符号</strong></h4><p><img src="./python%E4%B8%80%E7%BA%A7.assets/image-20250626183802674.png" alt="image-20250626183802674" / srcset="https://s2.loli.net/2024/03/18/YVbUifPl92JZX5B.gif" data-src="./python%E4%B8%80%E7%BA%A7.assets/image-20250626183802674.png" class="lozad post-image"></p><h4 id="基本结构"><a class="markdownIt-Anchor" href="#基本结构"></a> <strong>基本结构</strong></h4><ul><li><p>顺序型<br /><img src="./python%E4%B8%80%E7%BA%A7.assets/image-20250626183947663.png" alt="image-20250626183947663" / srcset="https://s2.loli.net/2024/03/18/YVbUifPl92JZX5B.gif" data-src="./python%E4%B8%80%E7%BA%A7.assets/image-20250626183947663.png" class="lozad post-image"></p></li><li><p>选择型：由某个逻辑判断式的取值决定选择两个处理中的一个<br /><img src="./python%E4%B8%80%E7%BA%A7.assets/image-20250626184030885.png" alt="image-20250626184030885" / srcset="https://s2.loli.net/2024/03/18/YVbUifPl92JZX5B.gif" data-src="./python%E4%B8%80%E7%BA%A7.assets/image-20250626184030885.png" class="lozad post-image"></p></li><li><p>先判断的循环（while）：在循环控制条件成立时，重复执行特定的处理</p><ul><li><img src="./python%E4%B8%80%E7%BA%A7.assets/image-20250626184202523.png" alt="image-20250626184202523" / srcset="https://s2.loli.net/2024/03/18/YVbUifPl92JZX5B.gif" data-src="./python%E4%B8%80%E7%BA%A7.assets/image-20250626184202523.png" class="lozad post-image"></li></ul></li><li><p>后判断的循环（until）：重复执行某些特定的处理，直至控制条件成立</p><ul><li><img src="./python%E4%B8%80%E7%BA%A7.assets/image-20250626184306659.png" alt="image-20250626184306659" / srcset="https://s2.loli.net/2024/03/18/YVbUifPl92JZX5B.gif" data-src="./python%E4%B8%80%E7%BA%A7.assets/image-20250626184306659.png" class="lozad post-image"></li></ul></li><li><p>多情况型（case）选择：列举多种处理情况，根据控制变量的取值，选择执行其一<br /><img src="./python%E4%B8%80%E7%BA%A7.assets/image-20250626184350074.png" alt="image-20250626184350074" / srcset="https://s2.loli.net/2024/03/18/YVbUifPl92JZX5B.gif" data-src="./python%E4%B8%80%E7%BA%A7.assets/image-20250626184350074.png" class="lozad post-image"></p></li></ul><p>案例：</p><p><img src="./python%E4%B8%80%E7%BA%A7.assets/image-20250626184445261.png" alt="image-20250626184445261" / srcset="https://s2.loli.net/2024/03/18/YVbUifPl92JZX5B.gif" data-src="./python%E4%B8%80%E7%BA%A7.assets/image-20250626184445261.png" class="lozad post-image"></p><h2 id="turtle库"><a class="markdownIt-Anchor" href="#turtle库"></a> Turtle库</h2><h3 id="第三方库"><a class="markdownIt-Anchor" href="#第三方库"></a> 第三方库</h3><p>Python第三方库是由社区开发者（非Python官方团队）创建和维护的可重用代码包，用于扩展Python标准库的功能，覆盖数据分析、Web开发、机器学习等广泛领域。它们通过简化复杂操作、提供高效工具，显著提升开发效率和代码质量。</p><p><strong>什么是第三方库</strong><br />第三方库是独立开发者或组织发布的代码集合，需通过包管理工具（如<code>pip</code>）安装。它们不属于Python标准库，但提供标准库未覆盖的特定功能（如高级数学计算、网络爬虫等）</p><p><strong>python环境如何安装第三方库</strong></p><ul><li><p>安装命令：<code>pip install 库名</code>（例如 <code>pip install requests</code>）</p></li><li><p>版本控制：<code>pip install 库名==版本号</code>（如 <code>pip install pandas==1.3.5</code>）</p></li><li><p>虚拟环境：使用<code>venv</code>或<code>virtualenv</code>隔离项目依赖，避免版本冲突</p></li></ul><p><strong>常见第三方库</strong></p><table><thead><tr><th style="text-align:center"><strong>领域</strong></th><th style="text-align:center"><strong>库名称</strong></th><th style="text-align:center"><strong>主要作用</strong></th><th style="text-align:center"><strong>典型场景</strong></th></tr></thead><tbody><tr><td style="text-align:center"><strong>🌐 网络请求</strong></td><td style="text-align:center"><code>requests</code></td><td style="text-align:center">简化HTTP请求发送与响应处理，支持GET/POST等方法</td><td style="text-align:center">API调用、网页数据抓取**1</td></tr><tr><td style="text-align:center"><strong>📈 数据分析</strong></td><td style="text-align:center"><code>pandas</code></td><td style="text-align:center">提供<code>DataFrame</code>数据结构，支持数据清洗、转换、聚合分析</td><td style="text-align:center">结构化数据处理、CSV/Excel操作</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><code>numpy</code></td><td style="text-align:center">高效处理多维数组和矩阵运算，支持科学计算</td><td style="text-align:center">数值模拟、线性代数运算</td></tr><tr><td style="text-align:center"><strong>📊 数据可视化</strong></td><td style="text-align:center"><code>matplotlib</code></td><td style="text-align:center">绘制2D图表（折线图、散点图等）</td><td style="text-align:center">数据结果可视化</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><code>pyecharts</code></td><td style="text-align:center">生成交互式Echarts图表</td><td style="text-align:center">动态数据展示</td></tr><tr><td style="text-align:center"><strong>🤖 机器学习</strong></td><td style="text-align:center"><code>scikit-learn</code></td><td style="text-align:center">提供经典机器学习算法（分类、回归、聚类）</td><td style="text-align:center">模型训练与评估</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><code>TensorFlow</code></td><td style="text-align:center">深度学习框架，支持神经网络构建</td><td style="text-align:center">图像识别、自然语言处理</td></tr><tr><td style="text-align:center"><strong>🧠 NLP处理</strong></td><td style="text-align:center"><code>nltk</code></td><td style="text-align:center">自然语言处理工具包（分词、词性标注）</td><td style="text-align:center">文本分析、情感识别</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><code>spaCy</code></td><td style="text-align:center">工业级NLP库，支持实体识别、句法分析</td><td style="text-align:center">大规模文本处理</td></tr><tr><td style="text-align:center"><strong>🕷️ 网络爬虫</strong></td><td style="text-align:center"><code>scrapy</code></td><td style="text-align:center">分布式爬虫框架，支持数据自动抓取与结构化存储</td><td style="text-align:center">网站数据批量采集</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><code>beautifulsoup4</code></td><td style="text-align:center">解析HTML/XML文档，提取特定内容</td><td style="text-align:center">网页内容抽取</td></tr><tr><td style="text-align:center"><strong>🌐 Web开发</strong></td><td style="text-align:center"><code>Django</code></td><td style="text-align:center">全功能Web框架（ORM、模板引擎、用户认证）</td><td style="text-align:center">企业级应用开发</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"><code>Flask</code></td><td style="text-align:center">轻量级Web框架，灵活扩展</td><td style="text-align:center"></td></tr></tbody></table><h4 id="导入库的方式"><a class="markdownIt-Anchor" href="#导入库的方式"></a> 导入库的方式</h4><ul><li>全量导入：<code>import pandas as pd</code></li><li>按需导入：<code>from datetime import date</code></li></ul><h3 id="turetle库导入"><a class="markdownIt-Anchor" href="#turetle库导入"></a> Turetle库导入</h3><pre class="highlight"><code class="hljs python"><span class="hljs-keyword">import</span> turtle  <span class="hljs-comment"># 推荐方式，避免命名冲突</span><br><span class="hljs-comment"># 或</span><br><span class="hljs-keyword">from</span> turtle <span class="hljs-keyword">import</span> *  <span class="hljs-comment"># 直接调用函数（小型项目适用）</span><br></code></pre><h4 id="画布设置"><a class="markdownIt-Anchor" href="#画布设置"></a> 画布设置</h4><pre class="highlight"><code class="hljs python">screen = turtle.Screen()  <span class="hljs-comment"># 创建画布</span><br>screen.title(<span class="hljs-string">&quot;我的绘图&quot;</span>)   <span class="hljs-comment"># 设置窗口标题</span><br>screen.bgcolor(<span class="hljs-string">&quot;lightblue&quot;</span>)  <span class="hljs-comment"># 设置背景色</span><br><br><br>pen = turtle.Turtle()     <span class="hljs-comment"># 创建画笔对象</span><br>pen.shape(<span class="hljs-string">&quot;turtle&quot;</span>)       <span class="hljs-comment"># 设置画笔形状（海龟/箭头等）</span><br>pen.speed(<span class="hljs-number">5</span>)              <span class="hljs-comment"># 设置速度（1-10，10最快）</span><br></code></pre><p><strong>创建画布对象：</strong></p><p><code>screen = turtle.Screen()  # 创建画布</code></p><p>画布名  =  海龟库中的Screen()方法</p><p><strong>设置画布状态：</strong></p><ul><li>清空画布：<a href="https://docs.python.org/zh-cn/3/library/turtle.html#turtle.clear" title="turtle.clear"><code>clear()</code></a></li><li>重置画布：<a href="https://docs.python.org/zh-cn/3/library/turtle.html#turtle.reset" title="turtle.reset"><code>reset()</code></a></li><li>设置画布颜色：<code>bgcolor()</code></li><li>设置画布大小：<code>screensize()</code><ul><li><img src="./python%E4%B8%80%E7%BA%A7.assets/image-20250626193129642.png" alt="image-20250626193129642" / srcset="https://s2.loli.net/2024/03/18/YVbUifPl92JZX5B.gif" data-src="./python%E4%B8%80%E7%BA%A7.assets/image-20250626193129642.png" class="lozad post-image"></li><li>注意：设置的是画布的大小并不是窗口的大小</li></ul></li></ul><h4 id="画笔海龟设置"><a class="markdownIt-Anchor" href="#画笔海龟设置"></a> 画笔（海龟）设置</h4><p><strong>创建画笔（海龟）对象的两种方式：</strong></p><ol><li><code>pen = turtle.Pen()</code></li><li><code>pen = turtle.Turtle()</code></li></ol><p><strong>设置画笔（海龟）的参数：</strong></p><ul><li><p>颜色：<code>pencolor()</code></p></li><li><p>填充颜色：<code>fillcolor()</code></p><ul><li><pre class="highlight"><code class="python">pen.begin_fill()         <span class="hljs-comment"># 开始填充</span><span class="hljs-comment"># 绘制图形（如正方形）</span><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):    pen.forward(<span class="hljs-number">100</span>)    pen.right(<span class="hljs-number">90</span>)pen.end_fill()           <span class="hljs-comment"># 结束填充</span>&lt;!--code￼<span class="hljs-number">27</span>--&gt;</code></pre></li></ul></li></ul><pre class="highlight"><code class="hljs python"><span class="hljs-comment"># 五角星</span><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>    pen.forward(<span class="hljs-number">150</span>)<br>    pen.right(<span class="hljs-number">144</span>)  <span class="hljs-comment"># 转角144°</span><br></code></pre><h4 id="多画笔海龟"><a class="markdownIt-Anchor" href="#多画笔海龟"></a> 多画笔（海龟）</h4><pre class="highlight"><code class="hljs python">t1 = turtle.Turtle()  <span class="hljs-comment"># 海龟1画三角形</span><br>t2 = turtle.Turtle()  <span class="hljs-comment"># 海龟2画正方形</span><br></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;中国电子学会青少年软件编程等级考试&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#中国电子学会青少年软件编程等级考试&quot;&gt;&lt;/a&gt; 中国电子学会青少年软件编程等级考试&lt;/h2&gt;
&lt;p&gt;官网：&lt;a href=&quot;http://www.qcei</summary>
      
    
    
    
    <category term="文档区" scheme="http://uerlink.github.io/categories/%E6%96%87%E6%A1%A3%E5%8C%BA/"/>
    
    
    <category term="python" scheme="http://uerlink.github.io/tags/python/"/>
    
    <category term="考级" scheme="http://uerlink.github.io/tags/%E8%80%83%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>历史的作用</title>
    <link href="http://uerlink.github.io/2025/08/01/%E2%80%8B%E8%BF%81%E6%80%9D%E5%9B%9E%E8%99%91/2025-08-01_%E5%8E%86%E5%8F%B2%E7%9A%84%E4%BD%9C%E7%94%A8/"/>
    <id>http://uerlink.github.io/2025/08/01/%E2%80%8B%E8%BF%81%E6%80%9D%E5%9B%9E%E8%99%91/2025-08-01_%E5%8E%86%E5%8F%B2%E7%9A%84%E4%BD%9C%E7%94%A8/</id>
    <published>2025-07-31T16:00:00.000Z</published>
    <updated>2025-08-30T17:13:19.701Z</updated>
    
    <content type="html"><![CDATA[<h1 id="历史的作用"><a class="markdownIt-Anchor" href="#历史的作用"></a> 历史的作用</h1><p>最近看一些关于商朝和周朝的历史事件，大为震撼！引发了我关于历史的思考，哲学上我们总是在想“我是谁？”，这一问题，从出生以后第一次有了关于自己的意识后，就一直在思考的问题。现在意识到了，以前历史课本上每一句以及一个词语一个字，其背后的历史都是源远流长，了解历史就会明白这些东西是怎么来的。在我未出生以前世界是怎样的，以及未来大致的发展走向。</p><h4 id="以史为鉴"><a class="markdownIt-Anchor" href="#以史为鉴"></a> 以史为鉴</h4><p>周总理说过:“历史对一个国家、一个民族，就像记忆对于个人一样，一个人丧失了记忆就会成为白痴，一个民族如果忘记了历史，就会成为一个愚昧的民族。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;历史的作用&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#历史的作用&quot;&gt;&lt;/a&gt; 历史的作用&lt;/h1&gt;
&lt;p&gt;最近看一些关于商朝和周朝的历史事件，大为震撼！引发了我关于历史的思考，哲学上我们总是在想“我是谁？”，这一问题，从出生以后第一</summary>
      
    
    
    
    <category term="迁思回虑" scheme="http://uerlink.github.io/categories/%E8%BF%81%E6%80%9D%E5%9B%9E%E8%99%91/"/>
    
    
  </entry>
  
  <entry>
    <title>实用软件</title>
    <link href="http://uerlink.github.io/2025/08/01/%E6%96%87%E6%A1%A3%E5%8C%BA/2025/2025-08-01_%E5%AE%9E%E7%94%A8%E8%BD%AF%E4%BB%B6/"/>
    <id>http://uerlink.github.io/2025/08/01/%E6%96%87%E6%A1%A3%E5%8C%BA/2025/2025-08-01_%E5%AE%9E%E7%94%A8%E8%BD%AF%E4%BB%B6/</id>
    <published>2025-07-31T16:00:00.000Z</published>
    <updated>2025-08-01T10:51:13.043Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实用软件"><a class="markdownIt-Anchor" href="#实用软件"></a> 实用软件</h1><h3 id="本地网盘"><a class="markdownIt-Anchor" href="#本地网盘"></a> 本地网盘</h3><p><a href="https://kohgylw.github.io/">kiftd 一款开源、完善、便捷的个人网盘搭建系统</a><br />可以修改里面的网页内容，也可以无需登录就上传下载。</p><h3 id="网络屏蔽"><a class="markdownIt-Anchor" href="#网络屏蔽"></a> 网络屏蔽</h3><p>软件网络屏蔽：<br /><a href="https://www.sordum.org/8125/firewall-app-blocker-fab-v1-9/">Firewall App Blocker (Fab) v1.9</a><br />浏览器网址屏蔽：<br /><a href="https://www.xitongzhijia.net/soft/241033.html">URL Disabler免费下载_URL Disabler(网址屏蔽软件)免安装版1.0 - 系统之家</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;实用软件&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#实用软件&quot;&gt;&lt;/a&gt; 实用软件&lt;/h1&gt;
&lt;h3 id=&quot;本地网盘&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#本地网盘&quot;&gt;&lt;/a&gt; 本地网盘&lt;/h3</summary>
      
    
    
    
    <category term="文档区" scheme="http://uerlink.github.io/categories/%E6%96%87%E6%A1%A3%E5%8C%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>白名单赛事</title>
    <link href="http://uerlink.github.io/2025/07/26/%E6%96%87%E6%A1%A3%E5%8C%BA/2025/2025-07-26_%E7%99%BD%E5%90%8D%E5%8D%95%E8%B5%9B%E4%BA%8B/"/>
    <id>http://uerlink.github.io/2025/07/26/%E6%96%87%E6%A1%A3%E5%8C%BA/2025/2025-07-26_%E7%99%BD%E5%90%8D%E5%8D%95%E8%B5%9B%E4%BA%8B/</id>
    <published>2025-07-25T16:00:00.000Z</published>
    <updated>2025-07-26T11:48:32.685Z</updated>
    
    <content type="html"><![CDATA[<h2 id="中国计算机学会"><a class="markdownIt-Anchor" href="#中国计算机学会"></a> 中国计算机学会</h2><p><a href="https://www.ccf.org.cn/Intro_CCF/2021-03-16/533517.shtml">中国计算机学会官网（https://www.ccf.org.cn/Intro_CCF/2021-03-16/533517.shtml）</a></p><h4 id="英文缩写"><a class="markdownIt-Anchor" href="#英文缩写"></a> 英文缩写</h4><ul><li><p>CCF 中国计算机学会</p></li><li><p>CSP 计算机软件能力认证</p></li><li><p>CSP-J/S   CCF非专业级软件能力认证</p></li><li><p>GESP  CCF编程能力等级认证</p></li><li><p>PTA 编程培训师资认证项目</p></li><li><p>NOI 全国青少年信息学奥林匹克</p></li><li><p>NOIP全国青少年信息学奥林匹克联赛</p></li><li><p>APIO亚洲和太平洋地区信息学奥林匹克</p></li><li><p>IOI即国际信息学奥林匹克竞赛</p></li></ul><h3 id="gespccf编程能力等级认证"><a class="markdownIt-Anchor" href="#gespccf编程能力等级认证"></a> <strong>GESP（CCF编程能力等级认证）</strong></h3><p><strong>官网：</strong><a href="https://gesp.ccf.org.cn/">https://gesp.ccf.org.cn/</a></p><p><strong>内容与时间：</strong></p><p>​8个等级，图形化、python、C<ins>可以同级别跨级考（如python考了3级，C</ins>就可以靠4级，即1级90分以上可报名3级，2级90分以上可报名4级，最快1年3个月可考满C++八级），线下考试。每年有4次认证机会，<strong>3月、6月、9月、12月</strong>。</p><p>​考纲：<a href="https://gesp.ccf.org.cn/101/1008/10012.html">GESP编程能力等级认证标准一至八级（大纲）（https://gesp.ccf.org.cn/101/1008/10012.html）</a></p><p><strong>作用：</strong></p><p>​编程能力等级认证。</p><p>​报考GESP可衔接CSP-J/S，为CSP-J/S第二轮获奖创造更多的机会。</p><p>​GESP 八级成绩大于等于60分：免CSP-J第一轮，参加CSP-J第二轮。</p><p>​GESP 八级成绩大于等于80分：免CSP-S第一轮，参加CSP-S第二轮。</p><h3 id="csp-jsccf非专业级软件能力认证"><a class="markdownIt-Anchor" href="#csp-jsccf非专业级软件能力认证"></a> <strong>CSP-J/S（CCF非专业级软件能力认证）</strong></h3><p>​CSP-J（Junior，入门级）CSP-S（Senior，提高级）</p><p>​CSP-J/S：CCF非专业级软件能力认证(Certified Software Professional Junior/Senior，简称CSP-J/S)创办于2019年，是由CCF统一组织的评价计算机非专业人士算法和编程能力的活动。在同一时间、不同地点以各省市为单位由CCF授权的省认证组织单位和总负责人组织。全国统一大纲、统一认证题目，任何人均可报名参加。CSP-J/S分两个级别进行，分别为CSP-J（入门级，Junior）和CSP-S（提高级，Senior），两个级别难度不同，均涉及算法和编程。CSP-J/S分第一轮和第二轮两个阶段。第一轮考察通用和实用的计算机科学知识，以笔试为主，部分省市以机试方式认证。第二轮为程序设计，须在计算机上调试完成。第一轮认证成绩优异者进入第二轮认证，第二轮认证结束后，CCF将根据CSP-J/S各组的认证成绩和给定的分数线，颁发认证证书。</p><p><strong>内容与时间：</strong></p><p>​CSP-J和CSP-S之间并没有晋级机制的存在，CSP-J/S是全国统考，任何人都可以报名参加，无论是中小学生、中高职学生、大学生还是社会人士都可以参加。</p><p>考试方式：J和S都分为两轮考试，</p><p><strong>报名：</strong></p><p>​无单位或校内无指导教师认证者，可申请个人报名。报名方式为：学校选择“四川省-成都市-个人报名”，指导教师选择“个人报名”，并自己负责个人信息填写正确。如因信息填写有误引发后续问题，由认证者承担责任。<strong>请优先通过学籍学校报名</strong>。特别注意，<strong>个人报名通道将在8月10日之后才会打开</strong>。</p><p><strong>通知：</strong></p><p><a href="https://www.noi.cn/xw/2025-06-27/845923.shtml">CCF关于举办CSP-J/S2025的通知（https://www.noi.cn/xw/2025-06-27/845923.shtml）</a></p><p><a href="https://www.noi.cn/xw/2025-06-27/845924.shtml">CSP-J/S2025第一轮报名通知（https://www.noi.cn/xw/2025-06-27/845924.shtml）</a></p><p><a href="https://www.noi.cn/gs/xw/sc/2025-07-02/846104.shtml?province=df">关于四川省CSP-J/S2025认证的相关问题说明（https://www.noi.cn/gs/xw/sc/2025-07-02/846104.shtml?province=df)</a></p><p><strong>作用：</strong></p><ol><li><p>参加CSP-J/S是信息学奥赛的前置赛</p></li><li><p>CSP-复赛在小初阶段含金量非常高，不管是入门组还是提高组，获奖都有助于升学(不同学校要求不同)。名校尤其重视信奥竞赛生，2023年人大附中明确提出信息学奥赛获得CSP-J组一等奖，或者CSP-S组二等奖及以上的招生条件。提高组三等奖以及入门二等奖就已经可以满足大部分学校的要求。有的地方高中甚至明确表示 CSP-J/S 入门组二等奖及以上就可以直接保送!至于提高组一等奖，毫无疑问可以保送至名校重点班，加入校信竞队重点。</p></li></ol><h4 id="csp-j"><a class="markdownIt-Anchor" href="#csp-j"></a> CSP-J</h4><p><a href="https://csp.wiki/docs/CSP-J">CSP-J 指南(https://csp.wiki/docs/CSP-J)</a></p><p>CSP-J 现在俗称普及组或入门组，是 CSP 系列的第一轮认证，主要考察选手的编程基础和算法能力，具体详见<a href="https://csp.wiki/docs/Start/01-Basic/01#csp-js">CSP介绍</a>。</p><p>CSP-J 分两轮，第一轮为初赛，形式为笔试，满分100分；第二轮为复赛，形式为上机编程，共四题满分400分，每题100分。</p><h4 id="csp-s"><a class="markdownIt-Anchor" href="#csp-s"></a> CSP-S</h4><p><a href="https://csp.wiki/docs/CSP-S">CSP-S 指南(https://csp.wiki/docs/CSP-S)</a></p><p>CSP-S现在俗称提高组，是CSP-J（普及组）的下一个阶段的考试。</p><p>CSP-S形式与CSP-J类似，分为两轮，第一轮为初赛形式为闭卷纸质试卷笔试，第二轮为上机测试。具体详见<a href="https://csp.wiki/docs/Start/01-Basic/01#csp-js">CSP介绍</a>。</p><h3 id="noip全国青少年信息学奥林匹克联赛"><a class="markdownIt-Anchor" href="#noip全国青少年信息学奥林匹克联赛"></a> <strong>NOIP</strong>全国青少年信息学奥林匹克联赛</h3><p><a href="https://www.noi.cn/gynoi/jj/">全国青少年信息学奥林匹克竞赛系列活动简介 (https://www.noi.cn/gynoi/jj/)</a></p><p>​全国青少年信息学奥林匹克联赛(National Olympiad in Informatics in Provinces简称NOIP)自1995年至今。每年由中国计算机学会统一组织。NOIP在 同一时间、不同地点以各省市为单位由特派员组织。全国统一大纲、统一试卷。初、高中或其他中等专业学校的学生可报名参加联赛。联赛分初赛和复赛 两个阶段。初赛考察通用和实用的计算机科学知识，以笔试为主。复赛为程序设计，须在计算机上调试完成。参加初赛者须达到一定分数线后才有资格参加复赛。联 赛分普及组和提高组两个组别，难度不同，分别面向初中和高中阶段的学生。</p><p><strong>NOIP参赛资格：</strong></p><ol><li>CCF认定的国内国际程序设计竞赛或能力认证成绩优秀者</li><li>被CCF认可的指导教师推荐！</li></ol><p>参加NOIP的选手主要从当年参加CSP-S第二轮的高中选手中进行选取，在各省范围内，成绩越优异的选手，获取NOIP参赛资格的几率越高。</p><p><strong>作用：</strong></p><p>​NOIP是参加NOI的必要条件，不参加NOIP将不具有NOI参与资格；</p><p>​NOIP成绩优异的选手有机会入选省队，代表各省参加NOI；</p><p>​NOIP是一个省级比赛，如果孩子获得NOIP省二等奖以上，可以走综合评价路线，并且对<a href="https://zhida.zhihu.com/search?content_id=241368833&amp;content_type=Article&amp;match_order=1&amp;q=%E5%BC%BA%E5%9F%BA%E8%AE%A1%E5%88%92&amp;zhida_source=entity">强基计划</a>的申请也是很有帮助的。</p><h3 id="noi全国青少年信息学奥林匹克竞赛"><a class="markdownIt-Anchor" href="#noi全国青少年信息学奥林匹克竞赛"></a> NOI（全国青少年信息学奥林匹克竞赛）</h3><p>​NOI全国青少年信息学奥林匹克（NOI）是国内包括港澳在内的省级代表队最高水平的大赛，自1984年至今，在国内包括香港、澳门组织竞赛活动。每年经各省选拔产生5名选手（其中一名是女选手），由中国计算机学会在计算机普及较好的城市组织进行比赛。这一竞赛记个人成绩，同时记团体总分。</p><p><strong>NOI参赛资格：</strong></p><p>​NOIP成绩优异的选手有机会入选省队，代表各省参加NOI；</p><p>​NOI 正式赛由 A/B/C 三类选手参加，赛期同步举办 NOI 夏令营活动，D/E 类选手可以作为营员，以非正式选手的身份观摩参赛。</p><h3 id="ioi国际信息学奥林匹克竞赛"><a class="markdownIt-Anchor" href="#ioi国际信息学奥林匹克竞赛"></a> IOI（国际信息学奥林匹克竞赛）</h3><p>​IOI：国际信息学奥林匹克竞赛（International Olympiad in Informatics）简称（IOI）。由中国计算机学会组织代表队，代表中国参加国际每年一次的IOI。中国是IOI创始国之一。IOI2000由中国主办，CCF承办。出国参赛得到中国科协和国家自然科学基金委的资助。自1989年开始，我国在NOI（网上同步赛99年开始）、NOIP、冬令营、选拔赛的基础上，组织参加国际信息学奥林匹克（IOI）竞赛。十几年中选拔75人次参加了 IOI，累计获金牌46块、银牌17块，铜牌12块。这些选手不仅在国际大赛中有好的表现，而且在现代的信息学科上也大展才华。中国已成为世界公认的信息 学奥林匹克竞赛强国，参赛选手、领队、教练曾受到江泽民、李鹏、李岚清等党和国家领导人及著名科学家的亲切接见和赞扬。</p><p><strong>IOI参赛资格：</strong></p><p>选拔参加国际信息学奥林匹克竞赛的中国代表队的竞赛（简称选拔赛）IOI的选手是从获NOI前20名选手中，经过10天的集中培训选拔赛，获得前4名的优胜者，才能代表中国参加国际IOI。</p><h2 id="中国电子学会"><a class="markdownIt-Anchor" href="#中国电子学会"></a> 中国电子学会</h2><h3 id="全国青少年信息素养大赛"><a class="markdownIt-Anchor" href="#全国青少年信息素养大赛"></a> 全国青少年信息素养大赛</h3><p>​全国青少年信息素养大赛(以下简称“大赛”原名全国青少年电子信息智能创新大赛)是“世界机器人大会青少年机器人设计与信息素养大赛赛事之一。</p><p>​根据《教育部办公厅关于公布2022-2025学年面向中小学生的全国性竞赛活动的通知》(教监管厅函(2022〕13号)，由中国电子学会主办的“世界机器人大会青少年机器人设计与信息素养大赛”正式入围“2022-2025学年面向中小学生的全国性竞赛活动名单”(即“白名单”)。大赛自2013年举办，已连续成功举办十一届，并获得第二十九届、第三十届联合国国际科学与和平周《优秀活动奖》和《特别贡献奖》。</p><h3 id="青少年等级考试"><a class="markdownIt-Anchor" href="#青少年等级考试"></a> 青少年等级考试</h3><h2 id="工业和信息化部人才交流中心"><a class="markdownIt-Anchor" href="#工业和信息化部人才交流中心"></a> 工业和信息化部人才交流中心</h2><h3 id="蓝桥杯青少年组"><a class="markdownIt-Anchor" href="#蓝桥杯青少年组"></a> 蓝桥杯青少年组</h3><p>​蓝桥杯全国软件和信息技术专业人才大赛简称“蓝桥杯”，是由工业和信息化部人才交流中心举办的信息技术竞赛，2016年“蓝桥杯”增设中小学创意编程组（简称青少组）。2022年9月蓝桥杯青少组入围教育部《2022-2025学年面向中小学生的全国性竞赛活动名单》，根据《面向中小学生的全国性竞赛活动管理办法》（教监管厅函〔2022〕4号）精神，蓝桥杯青少组比赛坚持公益、自愿、平等、公平公正等原则，旨在提升学生的科技素养、计算思维和程序设计能力，贯彻党的教育方针、发展素质教育，促进中小学生健康成长、全面发展。</p><p>考试内容：</p><p>Scratch</p><p>Python</p><p>C++</p><p>Arduino</p><p>EV3</p><p>Micro:bit</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;中国计算机学会&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#中国计算机学会&quot;&gt;&lt;/a&gt; 中国计算机学会&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.ccf.org.cn/Intro_CCF/2021-03-16/5335</summary>
      
    
    
    
    <category term="文档区" scheme="http://uerlink.github.io/categories/%E6%96%87%E6%A1%A3%E5%8C%BA/"/>
    
    
    <category term="白名单" scheme="http://uerlink.github.io/tags/%E7%99%BD%E5%90%8D%E5%8D%95/"/>
    
    <category term="考级" scheme="http://uerlink.github.io/tags/%E8%80%83%E7%BA%A7/"/>
    
    <category term="竞赛" scheme="http://uerlink.github.io/tags/%E7%AB%9E%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>为什么总是感觉忙不过来？</title>
    <link href="http://uerlink.github.io/2025/07/20/%E2%80%8B%E8%BF%81%E6%80%9D%E5%9B%9E%E8%99%91/2025-07-20_%E4%B8%BA%E4%BB%80%E4%B9%88%E6%80%BB%E6%98%AF%E6%84%9F%E8%A7%89%E5%BF%99%E4%B8%8D%E8%BF%87%E6%9D%A5%EF%BC%9F/"/>
    <id>http://uerlink.github.io/2025/07/20/%E2%80%8B%E8%BF%81%E6%80%9D%E5%9B%9E%E8%99%91/2025-07-20_%E4%B8%BA%E4%BB%80%E4%B9%88%E6%80%BB%E6%98%AF%E6%84%9F%E8%A7%89%E5%BF%99%E4%B8%8D%E8%BF%87%E6%9D%A5%EF%BC%9F/</id>
    <published>2025-07-19T16:00:00.000Z</published>
    <updated>2025-07-20T10:34:51.257Z</updated>
    
    <content type="html"><![CDATA[<h1 id="对忙不过来问题的探讨"><a class="markdownIt-Anchor" href="#对忙不过来问题的探讨"></a> 对“忙不过来”问题的探讨！</h1><h3 id="感受"><a class="markdownIt-Anchor" href="#感受"></a> 感受</h3><p>每天总是觉得很忙，要做的事情很多很多，一天结束后复盘，却发现事情好像并没有解决多少，效率低下。<br />有时一个问题解决了，但又马上安排另一个问题，任务计划的排得满满当当。</p><h3 id="为什么琐事越来越多"><a class="markdownIt-Anchor" href="#为什么琐事越来越多"></a> 为什么琐事越来越多？</h3><ul><li>重要的事情太难，大脑选择逃避（eg.学习新技能、做项目、…）。</li><li>简单且无需动脑的事情容易上手，给人虚假的成就感。（eg.复制粘贴、整理文件、回消息、…）。</li><li>外界干扰太多，注意力被碎片化，精力不集中！</li></ul><h3 id="解决方法"><a class="markdownIt-Anchor" href="#解决方法"></a> 解决方法：</h3><ul><li>学会区分“重要”与“不重要”（四象限）</li><li>每天先把要紧事情完成，在时间最集中和精力最充沛的时间段完成。</li><li>给锁事限制时间，超出时间就立刻停止！避免别虚假的成就感所鼓动。</li><li>避免无意义，且太长远的规划。类似的计划需要先选择一个计划完成，不要同时进行。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;对忙不过来问题的探讨&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#对忙不过来问题的探讨&quot;&gt;&lt;/a&gt; 对“忙不过来”问题的探讨！&lt;/h1&gt;
&lt;h3 id=&quot;感受&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#</summary>
      
    
    
    
    <category term="迁思回虑" scheme="http://uerlink.github.io/categories/%E8%BF%81%E6%80%9D%E5%9B%9E%E8%99%91/"/>
    
    
  </entry>
  
  <entry>
    <title>序列生成器</title>
    <link href="http://uerlink.github.io/2025/07/14/%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/2025-07-14_%E5%BA%8F%E5%88%97%E7%94%9F%E6%88%90%E5%99%A8/"/>
    <id>http://uerlink.github.io/2025/07/14/%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/2025-07-14_%E5%BA%8F%E5%88%97%E7%94%9F%E6%88%90%E5%99%A8/</id>
    <published>2025-07-13T16:00:00.000Z</published>
    <updated>2025-07-14T08:48:29.094Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序列生成器"><a class="markdownIt-Anchor" href="#序列生成器"></a> 序列生成器</h1><p>使用python结合tkinter、pandas、webbrowser库写一个生成符号序列和图案序列的小工具</p><p>github链接：<br /><a href="https://github.com/UerLink/SequenceGeneration.git">https://github.com/UerLink/SequenceGeneration.git</a></p><h3 id="符号生成效果"><a class="markdownIt-Anchor" href="#符号生成效果"></a> 符号生成效果：</h3><p>可以更改符号和数量</p><p>●●●●●●●●●●●●●●●●●●●●●●○○○○○○○○○○○○○○○○○○○○○○○○○○○○○○○○○○○○○○○○○○○○○○○○○○○○○○○○○○</p><p><img src="https://s2.loli.net/2025/07/14/uCboVyFRLq7AZiD.png" alt="" / srcset="https://s2.loli.net/2024/03/18/YVbUifPl92JZX5B.gif" data-src="https://s2.loli.net/2025/07/14/uCboVyFRLq7AZiD.png" class="lozad post-image"><br /><code>[] (附件/2025-07-14_序列生成器/image-20250714163601082.png)</code></p><h3 id="图案生成效果"><a class="markdownIt-Anchor" href="#图案生成效果"></a> 图案生成效果：</h3><p>生成HTML网页，大小为A4纸，点击序列标题可以打开打印界面。修改images的图片可以自定义生成图案。</p><p><img src="https://s2.loli.net/2025/07/14/e1y3gChVfnzM2Qo.png" alt="" / srcset="https://s2.loli.net/2024/03/18/YVbUifPl92JZX5B.gif" data-src="https://s2.loli.net/2025/07/14/e1y3gChVfnzM2Qo.png" class="lozad post-image"><br /><code>! [](附件/2025-07-14_序列生成器/image-20250714163720383.png)</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;序列生成器&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#序列生成器&quot;&gt;&lt;/a&gt; 序列生成器&lt;/h1&gt;
&lt;p&gt;使用python结合tkinter、pandas、webbrowser库写一个生成符号序列和图案序列的小工具&lt;/p&gt;
&lt;p&gt;g</summary>
      
    
    
    
    <category term="实践项目" scheme="http://uerlink.github.io/categories/%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE/"/>
    
    
  </entry>
  
  <entry>
    <title>名句</title>
    <link href="http://uerlink.github.io/2025/06/03/%E2%80%8B%E8%BF%81%E6%80%9D%E5%9B%9E%E8%99%91/2025-06-03_%E5%90%8D%E5%8F%A5/"/>
    <id>http://uerlink.github.io/2025/06/03/%E2%80%8B%E8%BF%81%E6%80%9D%E5%9B%9E%E8%99%91/2025-06-03_%E5%90%8D%E5%8F%A5/</id>
    <published>2025-06-02T16:00:00.000Z</published>
    <updated>2025-06-24T15:56:49.717Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我不知道我的选择是否正确，<br />这是我想要的突破还是循规蹈矩？<br />束缚我的东西太多了，<br />我的迷茫、我的焦虑、我的怯懦。<br />我要冲破这令我窒息的怀疑。<br />我要走，走到春暖花开，山高海阔；<br />我要走，走到人声鼎沸，灯火通明。<br />所以自由的第一枪由我打响，<br />我会一而再，再而三地救自己于水火，<br />哪怕伤痕累累，精神不死，我亦不屈。<br />命运的洪流不可抵挡，<br />而我的回答是：“向前！”</p></blockquote><div class="post-note note-success"><p>孩儿立志出乡关，学不成名誓不还。<br />埋骨何须桑梓地，人生无处不青山。</p></div><div class="post-note note-success"><p>嗯~</p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;我不知道我的选择是否正确，&lt;br /&gt;
这是我想要的突破还是循规蹈矩？&lt;br /&gt;
束缚我的东西太多了，&lt;br /&gt;
我的迷茫、我的焦虑、我的怯懦。&lt;br /&gt;
我要冲破这令我窒息的怀疑。&lt;br /&gt;
我要走，走到春暖花开，山高海阔；&lt;br /&gt;
</summary>
      
    
    
    
    <category term="迁思回虑" scheme="http://uerlink.github.io/categories/%E8%BF%81%E6%80%9D%E5%9B%9E%E8%99%91/"/>
    
    
  </entry>
  
  <entry>
    <title>专利认识--- 实用新型专利</title>
    <link href="http://uerlink.github.io/2025/05/26/%E2%80%8B%E8%BF%81%E6%80%9D%E5%9B%9E%E8%99%91/2025-05-26_%E4%B8%93%E5%88%A9%E8%AE%A4%E8%AF%86/"/>
    <id>http://uerlink.github.io/2025/05/26/%E2%80%8B%E8%BF%81%E6%80%9D%E5%9B%9E%E8%99%91/2025-05-26_%E4%B8%93%E5%88%A9%E8%AE%A4%E8%AF%86/</id>
    <published>2025-05-25T16:00:00.000Z</published>
    <updated>2025-05-25T19:30:00.546Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实用新型专利"><a class="markdownIt-Anchor" href="#实用新型专利"></a> 实用新型专利</h1><h2 id="新知识"><a class="markdownIt-Anchor" href="#新知识"></a> 新知识</h2><p>今天在学习单片机电源设计时，用到了一款SOC芯片IP5306（支持2.4A的同步升压转换和2.1A的同步开关充电），但是呢！有个缺点在外部电源断开时切换为锂电池供电会出现0.5s的断电，单片机就会掉电复位。我想让它不断电像UPS一样就去搜索实现方案，搜索到一篇实用新型专利，我很好奇这个专利中的电路与我搜索的其他电路只多了一个二极管，假如其他人也想到添加一个二极管，那不就侵权了吗？未免不要太容易。</p><p>才发现实用新型专利还像没啥含金量，电路本身不受保护，保护的只是所用的组合方式。假如涉及到侵权那改改二极管型号就可以了。有的时候一些小公司会鼓励员工多申请实用新型专利，来增加公司的专利数，在外人面前提升公司名气。有趣！0_0<br />当然也不是那么差，我只是才了解到这个，随着后续学习可能有新的理解。</p><h2 id="ai回答"><a class="markdownIt-Anchor" href="#ai回答"></a> AI回答</h2><p>实用新型专利与发明专利是我国专利法保护的两种主要类型，二者在保护客体、创造性要求、审查程序等方面存在显著区别。</p><h3 id="一-保护客体"><a class="markdownIt-Anchor" href="#一-保护客体"></a> 一、保护客体</h3><ol><li><p><strong>发明专利</strong><br />保护范围涵盖产品、方法及其改进方案。例如：</p><ul><li><strong>产品发明</strong>：新型材料、机械设备等物质形态创新；</li><li><strong>方法发明</strong>：生产工艺、检测技术等流程性创新。<br />可涉及无固定形状的物质（如液态、气态）。</li></ul></li><li><p><strong>实用新型专利</strong><br />仅保护具有确定形状或构造的实体产品，例如：</p><ul><li>牙刷的结构改进、机械部件的组合优化；</li><li>排除方法类创新（如制造工艺）和未定型产品（如粉末状材料）。</li></ul></li></ol><hr /><h3 id="二-授权标准"><a class="markdownIt-Anchor" href="#二-授权标准"></a> 二、授权标准</h3><ol><li><p><strong>创造性要求</strong></p><ul><li>发明需具备“突出的实质性特点和显著进步”，强调技术突破性；</li><li>实用新型仅需“实质性特点和进步”，对创新高度要求较低。</li></ul></li><li><p><strong>实用性</strong><br />两者均需满足实用性要求，但实用新型更侧重实际应用效果，例如结构优化带来的使用便利性提升。</p></li></ol><hr /><h3 id="三-审查程序与周期"><a class="markdownIt-Anchor" href="#三-审查程序与周期"></a> 三、审查程序与周期</h3><ol><li><p><strong>发明专利</strong></p><ul><li><strong>实质审查制</strong>：需通过新颖性、创造性、实用性全面审查，耗时约2-3年；</li><li>包含18个月公开期及可能的期限补偿（如新药专利最长可延长5年保护）。</li></ul></li><li><p><strong>实用新型专利</strong></p><ul><li><strong>初步审查制</strong>：仅审查形式要件和明显缺陷，授权周期短（通常6-12个月）；</li><li>无实质审查，专利权稳定性相对较低，后续可能需补充“专利权评价报告”验证有效性。</li></ul></li></ol><hr /><h3 id="四-保护期限与费用"><a class="markdownIt-Anchor" href="#四-保护期限与费用"></a> 四、保护期限与费用</h3><table><thead><tr><th>项目</th><th>发明专利</th><th>实用新型专利</th></tr></thead><tbody><tr><td>保护期限</td><td>20年（自申请日起）</td><td>10年（自申请日起）</td></tr><tr><td>申请费用</td><td>约3400元（含实审费）</td><td>约500元</td></tr><tr><td>年费标准</td><td>逐年递增，最高8000元/年</td><td>逐年递增，最高2000元/年</td></tr></tbody></table><hr /><h3 id="五-其他关键差异"><a class="markdownIt-Anchor" href="#五-其他关键差异"></a> 五、其他关键差异</h3><ol><li><p><strong>权利稳定性</strong><br />发明因经过实质审查，无效风险较低；实用新型易因缺乏创造性被宣告无效。</p></li><li><p><strong>申请策略</strong><br />允许同日申请两者（需声明放弃实用新型），以兼顾快速授权与长期保护。</p></li><li><p><strong>适用场景</strong></p><ul><li>发明适合核心技术或生命周期长的创新；</li><li>实用新型适合结构改进型产品或需快速商业化的技术。</li></ul></li></ol><hr />]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;实用新型专利&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#实用新型专利&quot;&gt;&lt;/a&gt; 实用新型专利&lt;/h1&gt;
&lt;h2 id=&quot;新知识&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#新知识&quot;&gt;&lt;/a&gt; 新知识&lt;</summary>
      
    
    
    
    <category term="迁思回虑" scheme="http://uerlink.github.io/categories/%E8%BF%81%E6%80%9D%E5%9B%9E%E8%99%91/"/>
    
    
    <category term="专利" scheme="http://uerlink.github.io/tags/%E4%B8%93%E5%88%A9/"/>
    
    <category term="新知识" scheme="http://uerlink.github.io/tags/%E6%96%B0%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
</feed>
