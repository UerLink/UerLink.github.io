<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>UerLink_Blog</title>
  
  
  <link href="http://uerlink.github.io/atom.xml" rel="self"/>
  
  <link href="http://uerlink.github.io/"/>
  <updated>2023-08-02T14:18:49.233Z</updated>
  <id>http://uerlink.github.io/</id>
  
  <author>
    <name>UerLink</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>博客上传命令行测试</title>
    <link href="http://uerlink.github.io/2023/08/02/%E6%B5%8B%E8%AF%95%E5%8C%BA/2023-08-02_%E5%8D%9A%E5%AE%A2%E4%B8%8A%E4%BC%A0%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%B5%8B%E8%AF%95/"/>
    <id>http://uerlink.github.io/2023/08/02/%E6%B5%8B%E8%AF%95%E5%8C%BA/2023-08-02_%E5%8D%9A%E5%AE%A2%E4%B8%8A%E4%BC%A0%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%B5%8B%E8%AF%95/</id>
    <published>2023-08-01T16:00:00.000Z</published>
    <updated>2023-08-02T14:18:49.233Z</updated>
    
    <content type="html"><![CDATA[<h1 id="批处理bat命令行"><a class="markdownIt-Anchor" href="#批处理bat命令行"></a> 批处理BAT命令行</h1><pre class="highlight"><code class="hljs bash">@<span class="hljs-built_in">echo</span> off<br><br>chcp 65001<br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;▬▬▬▬▬▬▬▬▬▬▬▬▬▶ 已切换中文编码&quot;</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;▬▬▬▬▬▬▬▬▬▬▬▬▬▶ 清除缓存已禁用！如果博客样式出现问题，请重新开启&quot;</span><br><br><span class="hljs-built_in">cd</span> /d  D:\UerLinkBlog<br><br>title HexoGo<br><br><span class="hljs-built_in">cd</span><br><br>%call hexo clean%<br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;▬▬▬▬▬▬▬▬▬▬▬▬▬▶ 博客开始重新生成:&quot;</span><br><br>call hexo g<br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;▬▬▬▬▬▬▬▬▬▬▬▬▬▶ 博客开始上传GitHub:&quot;</span><br><br>call hexo d<br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;▬▬▬▬▬▬▬▬▬▬▬▬▬▶ 博客预览服务启动:&quot;</span><br><br>call hexo s<br><br>pause<br><br></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;批处理bat命令行&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#批处理bat命令行&quot;&gt;&lt;/a&gt; 批处理BAT命令行&lt;/h1&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;hljs bash&quot;&gt;@&lt;span </summary>
      
    
    
    
    <category term="测试区" scheme="http://uerlink.github.io/categories/%E6%B5%8B%E8%AF%95%E5%8C%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>mod开发笔记</title>
    <link href="http://uerlink.github.io/2023/08/02/%E6%96%87%E6%A1%A3%E5%8C%BA/2023-08-02_mod%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    <id>http://uerlink.github.io/2023/08/02/%E6%96%87%E6%A1%A3%E5%8C%BA/2023-08-02_mod%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/</id>
    <published>2023-08-01T16:00:00.000Z</published>
    <updated>2023-08-02T14:19:53.049Z</updated>
    
    <content type="html"><![CDATA[<h1 id="星露谷物语mod开发"><a class="markdownIt-Anchor" href="#星露谷物语mod开发"></a> 星露谷物语mod开发</h1><h3 id="每天早晨打印一条消息的代码"><a class="markdownIt-Anchor" href="#每天早晨打印一条消息的代码"></a> 每天早晨打印一条消息的代码</h3><pre class="highlight"><code class="hljs C#"><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span>模组的主要入口点。<span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ModEntry</span> : <span class="hljs-title">Mod</span><br>&#123;<br>    <span class="hljs-comment">/**********</span><br><span class="hljs-comment">    ** 公共方法</span><br><span class="hljs-comment">    *********/</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span>模组入口点，加载模组后自动调用<span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;helper&quot;&gt;</span>提供用于编写模组的简化API<span class="hljs-doctag">&lt;/param&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Entry</span>(<span class="hljs-params">IModHelper helper</span>)</span><br>    &#123;<br>        <span class="hljs-comment">// 事件 += 方法</span><br>        helper.Events.GameLoop.DayStarted += <span class="hljs-keyword">this</span>.OnDayStarted;<br>    &#125;<br>    <br>    <span class="hljs-comment">/**********</span><br><span class="hljs-comment">    ** 私有方法</span><br><span class="hljs-comment">    *********/</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span>在新的一天开始后调用的方法<span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;sender&quot;&gt;</span>事件对象<span class="hljs-doctag">&lt;/param&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;e&quot;&gt;</span>事件参数<span class="hljs-doctag">&lt;/param&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnDayStarted</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, DayStartedEventArgs e</span>)</span><br>    &#123;<br>       <span class="hljs-keyword">this</span>.Monitor.Log(<span class="hljs-string">$&quot;新的一天到来了！<span class="hljs-subst">&#123;Game1.player.Name&#125;</span> 享受你的新一天吧&quot;</span>, LogLevel.Debug);<br>    &#125;<br>&#125;<br></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;星露谷物语mod开发&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#星露谷物语mod开发&quot;&gt;&lt;/a&gt; 星露谷物语mod开发&lt;/h1&gt;
&lt;h3 id=&quot;每天早晨打印一条消息的代码&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot;</summary>
      
    
    
    
    <category term="文档区" scheme="http://uerlink.github.io/categories/%E6%96%87%E6%A1%A3%E5%8C%BA/"/>
    
    
    <category term="mod" scheme="http://uerlink.github.io/tags/mod/"/>
    
    <category term="game" scheme="http://uerlink.github.io/tags/game/"/>
    
  </entry>
  
  <entry>
    <title>博客上传常见问题</title>
    <link href="http://uerlink.github.io/2023/08/02/%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/2023-08-02_%E5%8D%9A%E5%AE%A2%E4%B8%8A%E4%BC%A0%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    <id>http://uerlink.github.io/2023/08/02/%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/2023-08-02_%E5%8D%9A%E5%AE%A2%E4%B8%8A%E4%BC%A0%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</id>
    <published>2023-08-01T16:00:00.000Z</published>
    <updated>2023-08-02T13:40:50.171Z</updated>
    
    <content type="html"><![CDATA[<h2 id="解决上传时提示warning-lf-will-be-replaced-by-crlf-in的方法"><a class="markdownIt-Anchor" href="#解决上传时提示warning-lf-will-be-replaced-by-crlf-in的方法"></a> 解决上传时提示warning: LF will be replaced by CRLF in的方法</h2><h4 id="原因"><a class="markdownIt-Anchor" href="#原因"></a> 原因</h4><p>不同操作系统行尾结束符不一样：</p><pre class="highlight"><code class="hljs bash">Uinx/Linux --- \n(LF); <br>windows --- \r\n(CRLF)<br></code></pre><h4 id="方法"><a class="markdownIt-Anchor" href="#方法"></a> 方法</h4><p>在git上配置core.autocrlf属性为false，默认为trun</p> <pre class="highlight"><code class="hljs bash">git config --get core.autocrlf   //查看命令<br><br>git config --global core.autocrlf <span class="hljs-literal">false</span>    //修改命令<br><br></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;解决上传时提示warning-lf-will-be-replaced-by-crlf-in的方法&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#解决上传时提示warning-lf-will-be-replaced-by-crlf-in的</summary>
      
    
    
    
    <category term="踩坑记录" scheme="http://uerlink.github.io/categories/%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="blog" scheme="http://uerlink.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>算法练习</title>
    <link href="http://uerlink.github.io/2023/08/02/%E6%96%87%E6%A1%A3%E5%8C%BA/2023-08-02_%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/"/>
    <id>http://uerlink.github.io/2023/08/02/%E6%96%87%E6%A1%A3%E5%8C%BA/2023-08-02_%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/</id>
    <published>2023-08-01T16:00:00.000Z</published>
    <updated>2023-08-02T14:31:10.861Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简单算法练习"><a class="markdownIt-Anchor" href="#简单算法练习"></a> 简单算法练习</h1><h3 id="习题5-2"><a class="markdownIt-Anchor" href="#习题5-2"></a> 习题5-2</h3><p>分式化简。设计算法，将一个给定的真分数化简为最简分数形式，例如将6/8 化简为 3/4，使用C++语言</p><h4 id="关键代码辗转相除法必背"><a class="markdownIt-Anchor" href="#关键代码辗转相除法必背"></a> 关键代码(辗转相除法)（必背）</h4><p>gcd函数导入a，b，判断b是否等于0，如果等于就返回a的值，然后接着执行gcd函数将b填入a，a % b</p><pre class="highlight"><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (b == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> a;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">gcd</span>(b, a % b);<br>&#125;<br></code></pre><h4 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h4><pre class="highlight"><code class="hljs c++"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br><br>    <span class="hljs-keyword">if</span> (b == <span class="hljs-number">0</span>) &#123;<br><br>        <span class="hljs-keyword">return</span> a;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">gcd</span>(b, a % b);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> x, y;<br>    cout &lt;&lt; <span class="hljs-string">&quot;请输入分子和分母：&quot;</span> &lt;&lt; endl;<br>    cin &gt;&gt; x &gt;&gt; y;<br>    <span class="hljs-type">int</span> g = <span class="hljs-built_in">gcd</span>(x, y);<br>    x /= g;<br>    y /= g;<br>    cout &lt;&lt; x &lt;&lt; <span class="hljs-string">&quot;/&quot;</span> &lt;&lt; y &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre><h4 id="解释"><a class="markdownIt-Anchor" href="#解释"></a> 解释</h4><pre class="highlight"><code class="hljs C++"><br><span class="hljs-number">1.</span> 求出分子和分母的最大公约数（使用辗转相除法）。<br><br><span class="hljs-number">2.</span> 将分子和分母同时除以最大公约数，得到最简分数形式。<br><br></code></pre><h3 id="习题5-3"><a class="markdownIt-Anchor" href="#习题5-3"></a> 习题5-3</h3><p>设计算法，判断一个大整数能否被11整除。可以采用以下方法：将该数的十进制表示从右端开始，每两位一组构成一个整数，然后将这些数相加，判断其能否被11整除，例如将562843748 分割成 5，62，84，37，48，然后判断（5+62+84+37+48）能否被11整除</p><h4 id="关键代码必背"><a class="markdownIt-Anchor" href="#关键代码必背"></a> 关键代码（必背）</h4><pre class="highlight"><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">divisible</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (n &gt; <span class="hljs-number">0</span>) &#123;<br>        sum += n % <span class="hljs-number">100</span>;<br>        n /= <span class="hljs-number">100</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> (sum % <span class="hljs-number">11</span> == <span class="hljs-number">0</span>);<br>&#125;<br><br></code></pre><h4 id="代码-2"><a class="markdownIt-Anchor" href="#代码-2"></a> 代码</h4><pre class="highlight"><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">divisible</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (n &gt; <span class="hljs-number">0</span>) &#123;<br>        sum += n % <span class="hljs-number">100</span>;<br>        n /= <span class="hljs-number">100</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> (sum % <span class="hljs-number">11</span> == <span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">divisible</span>(n)) &#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;可以被11整除&quot;</span>&lt;&lt;endl;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;不可以被11整除&quot;</span>&lt;&lt;endl;<br>    &#125;<br>&#125;<br></code></pre><h4 id="解释-2"><a class="markdownIt-Anchor" href="#解释-2"></a> 解释</h4><pre class="highlight"><code class="hljs excel"><span class="hljs-number">1</span>. 初始化<span class="hljs-built_in">sum</span>为<span class="hljs-number">0</span>。<br><span class="hljs-number">2</span>. 将大整数<span class="hljs-built_in">n</span>逐步取出最后两位数字，加到<span class="hljs-built_in">sum</span>中，直到<span class="hljs-built_in">n</span>变为<span class="hljs-number">0</span>为止。<br><span class="hljs-number">3</span>. 判断<span class="hljs-built_in">sum</span>能否被<span class="hljs-number">11</span>整除，如果能，则该大整数能被<span class="hljs-number">11</span>整除，否则不能。<br><br></code></pre><h3 id="习题5-5题"><a class="markdownIt-Anchor" href="#习题5-5题"></a> 习题5 - 5题</h3><p>设计一个算法，在数组r[n]中删除重复的元素，要求移动元素的次数较少，并使剩余元素间的相对次序保持不变</p><h4 id="代码-3"><a class="markdownIt-Anchor" href="#代码-3"></a> 代码</h4><pre class="highlight"><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">removeDuplicates</span><span class="hljs-params">(<span class="hljs-type">int</span> r[], <span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-type">int</span> i, j, k;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-keyword">for</span> (j = i + <span class="hljs-number">1</span>; j &lt; n;) &#123;<br>            <span class="hljs-keyword">if</span> (r[j] == r[i]) &#123;<br>                <span class="hljs-keyword">for</span> (k = j; k &lt; n - <span class="hljs-number">1</span>; k++) &#123;<br>                    r[k] = r[k + <span class="hljs-number">1</span>];<br>                &#125;<br>                n--;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                j++;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> r[] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>&#125;;<br>    <span class="hljs-type">int</span> n = <span class="hljs-built_in">sizeof</span>(r) / <span class="hljs-built_in">sizeof</span>(r[<span class="hljs-number">0</span>]);<br>    <span class="hljs-built_in">removeDuplicates</span>(r, n);<br>    cout &lt;&lt; <span class="hljs-string">&quot;After removing duplicates: &quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        cout &lt;&lt; r[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    cout &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre><h4 id="解释-3"><a class="markdownIt-Anchor" href="#解释-3"></a> 解释</h4><pre class="highlight"><code class="hljs excel">这段代码实现了一个删除数组中重复元素的算法。它通过循环遍历数组中的每一个元素，并与后面的元素进行比较，如果发现重复的元素，则将后面的元素依次向前移动一位，直到将重复的元素删除。为了减少移动元素的次数，代码从后往前移动元素。最终，剩余元素间的相对次序保持不变。<br><br>主函数中，我们定义了一个数组 r 和数组长度 <span class="hljs-built_in">n</span>，然后调用 removeDuplicates 函数，将重复元素删除。最后，输出删除重复元素后的数组。<br><br>该算法的时间复杂度为 O(<span class="hljs-built_in">n</span>^<span class="hljs-number">2</span>)，因为需要循环遍历数组中的每一个元素，并与后面的元素进行比较。如果数组中包含大量重复元素，这个算法的效率会很低。<br><br></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;简单算法练习&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#简单算法练习&quot;&gt;&lt;/a&gt; 简单算法练习&lt;/h1&gt;
&lt;h3 id=&quot;习题5-2&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#习题5-2&quot;&gt;&lt;/a&gt; </summary>
      
    
    
    
    <category term="文档区" scheme="http://uerlink.github.io/categories/%E6%96%87%E6%A1%A3%E5%8C%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>TP4056芯片充电电路</title>
    <link href="http://uerlink.github.io/2023/08/01/%E7%A1%AC%E4%BB%B6%E8%AE%BE%E8%AE%A1/2023-08-01_TP4056%E8%8A%AF%E7%89%87%E5%85%85%E7%94%B5%E7%94%B5%E8%B7%AF/"/>
    <id>http://uerlink.github.io/2023/08/01/%E7%A1%AC%E4%BB%B6%E8%AE%BE%E8%AE%A1/2023-08-01_TP4056%E8%8A%AF%E7%89%87%E5%85%85%E7%94%B5%E7%94%B5%E8%B7%AF/</id>
    <published>2023-07-31T16:00:00.000Z</published>
    <updated>2023-08-02T13:54:17.254Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用tp4056芯片实现对锂电池进行充电"><a class="markdownIt-Anchor" href="#使用tp4056芯片实现对锂电池进行充电"></a> 使用TP4056芯片实现对锂电池进行充电</h1><h3 id="芯片说明"><a class="markdownIt-Anchor" href="#芯片说明"></a> 芯片说明</h3><blockquote><p><a href="https://www.elecfans.com/dianlutu/app/20180326652308.html">锂电池管理芯片tp4056中文资料及应用电路图汇总 - IC应用电路图 - 电子发烧友网 (elecfans.com)</a></p></blockquote><p>TP4056是一款完整的单节锂离子电池采用恒定电流/恒定电压线性充电器。其底部带有散热片的SOP8封装与较少的外部元件数目使得TP4056成为便携式应用的理想选择。TP4056可以适合USB电源和适配器电源工作。由于采用了内部PMOSFET架构，加上防倒充电路，所以不需要外部隔离二极管。热反馈可对充电电流进行自动调节，以便在大功率操作或高环境温度条件下对芯片温度加以限制。充电电压固定于4.2V，而充电电流可通过一个电阻器进行外部设置。当充电电流在达到最终浮充电压之后降至设定值1/10时，TP4056将自动终止充电循环。</p><h3 id="引脚"><a class="markdownIt-Anchor" href="#引脚"></a> 引脚</h3><p>VCC：电压输入<br />GND：接地<br />CE：芯片使能输入端。高电平有效<br />BAT：电池正极（+）连接端<br />TEMP：电池温度检测输入端<br />PROG：恒流充电电流设置端<br />CHRG：充电状态指示端，输出<br />STDBY：充电完成指示端，输出</p><h3 id="限流电阻阻值表"><a class="markdownIt-Anchor" href="#限流电阻阻值表"></a> 限流电阻阻值表</h3><blockquote><p><a href="https://blog.csdn.net/qq_36229876/article/details/104037501">锂电池充电IC-TP4056电路设计详解_tp4056充电电路图_董程森的博客-CSDN博客</a></p></blockquote><p>通过设置R3(下图中)电阻，阻值大小，更改BAT端输出电流大小</p><h3 id="原理图"><a class="markdownIt-Anchor" href="#原理图"></a> 原理图</h3><p><a href="https://imgse.com/i/pPCT4mT"><img src="https://s1.ax1x.com/2023/08/01/pPCT4mT.png" alt="pPCT4mT.png" / srcset="https://s1.ax1x.com/2022/05/03/OAe0fI.png" data-src="https://s1.ax1x.com/2023/08/01/pPCT4mT.png" class="lozad post-image"></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;使用tp4056芯片实现对锂电池进行充电&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#使用tp4056芯片实现对锂电池进行充电&quot;&gt;&lt;/a&gt; 使用TP4056芯片实现对锂电池进行充电&lt;/h1&gt;
&lt;h3 id=&quot;芯片说明&quot;&gt;&lt;a clas</summary>
      
    
    
    
    <category term="硬件设计" scheme="http://uerlink.github.io/categories/%E7%A1%AC%E4%BB%B6%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="PCB" scheme="http://uerlink.github.io/tags/PCB/"/>
    
    <category term="芯片" scheme="http://uerlink.github.io/tags/%E8%8A%AF%E7%89%87/"/>
    
  </entry>
  
</feed>
