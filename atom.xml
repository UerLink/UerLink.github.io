<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>UerLink_Blog</title>
  
  
  <link href="http://uerlink.github.io/atom.xml" rel="self"/>
  
  <link href="http://uerlink.github.io/"/>
  <updated>2023-05-04T16:06:38.631Z</updated>
  <id>http://uerlink.github.io/</id>
  
  <author>
    <name>UerLink</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Ubuntu安装nginx，部署网站</title>
    <link href="http://uerlink.github.io/2023/04/26/%E6%96%87%E6%A1%A3%E5%8C%BA/Ubuntu%E5%AE%89%E8%A3%85nginx%EF%BC%8C%E9%83%A8%E7%BD%B2%E7%BD%91%E7%AB%99/"/>
    <id>http://uerlink.github.io/2023/04/26/%E6%96%87%E6%A1%A3%E5%8C%BA/Ubuntu%E5%AE%89%E8%A3%85nginx%EF%BC%8C%E9%83%A8%E7%BD%B2%E7%BD%91%E7%AB%99/</id>
    <published>2023-04-25T16:00:00.000Z</published>
    <updated>2023-05-04T16:06:38.631Z</updated>
    
    <content type="html"><![CDATA[<h3 id="切换至root用户并安装nginx"><a class="markdownIt-Anchor" href="#切换至root用户并安装nginx"></a> 切换至root用户,并安装nginx</h3><p>Nginx 在默认的 Ubuntu 源仓库中可用</p><pre class="highlight"><code class="hljs bash">sudo apt update<br>sudo su root<br>apt-get install nginx<br></code></pre><h3 id="查看nginx是否安装成功"><a class="markdownIt-Anchor" href="#查看nginx是否安装成功"></a> 查看nginx是否安装成功</h3><pre class="highlight"><code class="hljs ebnf"><span class="hljs-attribute">nginx -v</span><br></code></pre><h3 id="运行控制"><a class="markdownIt-Anchor" href="#运行控制"></a> 运行控制</h3><h4 id="启动nginx"><a class="markdownIt-Anchor" href="#启动nginx"></a> 启动nginx</h4><pre class="highlight"><code class="hljs crmsh">service nginx <span class="hljs-literal">start</span><br></code></pre><h4 id="各种重启"><a class="markdownIt-Anchor" href="#各种重启"></a> 各种重启</h4><pre class="highlight"><code class="hljs maxima">service nginx <span class="hljs-built_in">restart</span><br><br>sudo systemctl <span class="hljs-built_in">restart</span> nginx<br><br>nginx -s reload<br></code></pre><h4 id="停止"><a class="markdownIt-Anchor" href="#停止"></a> 停止</h4><pre class="highlight"><code class="hljs arduino">service nginx stop<br></code></pre><h3 id="nginx文件安装完成之后的文件位置"><a class="markdownIt-Anchor" href="#nginx文件安装完成之后的文件位置"></a> nginx文件安装完成之后的文件位置：</h3><p>/usr/sbin/nginx：主程序<br />/etc/nginx：存放配置文件<br />/usr/share/nginx：存放静态文件<br />/var/log/nginx：存放日志</p><h4 id="配置网站"><a class="markdownIt-Anchor" href="#配置网站"></a> 配置网站</h4><p>在/etc/nginx/conf.d目录中新建后缀名为 .conf 的空白文件 test.conf<br />写入配置表</p><pre class="highlight"><code class="hljs txt">server &#123;<br>    listen       80;<br>    server_name  example.com;<br>    #开启openai接口的gzip压缩，大量重复文本的压缩率高，节省服务端流量<br>    gzip  on;<br>    gzip_min_length 1k;<br>    gzip_types text/event-stream;<br><br>    #如需部署在网站子路径，如&quot;example.com/chatgpt&quot;，配置如下<br>    #location ^~ /chatgpt/v1 &#123;<br>    location ^~ /v1 &#123;<br>        proxy_pass https://api.openai.com/v1;<br>        proxy_set_header Host api.openai.com;<br>        proxy_ssl_name api.openai.com;<br>        proxy_ssl_server_name on;<br>        #注意Bearer 后改为正确的token。如需网页设置自定义API key使用，则注释掉下一行<br>        proxy_set_header  Authorization &quot;Bearer sk-your-token&quot;;<br>        proxy_pass_header Authorization;<br>        #流式传输，不关闭buffering缓存会卡顿卡死，必须配置！！！<br>        proxy_buffering off;<br>    &#125;<br>    #与上面反代接口的路径保持一致<br>    #location /chatgpt &#123;<br>    location / &#123;<br>        alias /usr/share/nginx/html/;<br>        index index.html;<br>    &#125;<br>&#125;<br></code></pre><p>检查配置是否生效</p><pre class="highlight"><code class="hljs ebnf"><span class="hljs-attribute">nginx -t</span><br><br></code></pre><h5 id="配置ssl证书"><a class="markdownIt-Anchor" href="#配置ssl证书"></a> 配置ssl证书</h5><p>参考教程链接：<a href="https://zhuanlan.zhihu.com/p/85040625">Nginx操作 | Nginx配置SSL证书 - 知乎 (zhihu.com)</a></p><p>配置完以后要重启</p><pre class="highlight"><code class="hljs bash">sudo service nginx restart<br></code></pre><p>注意ssl认证文件的路径要正确</p><pre class="highlight"><code class="hljs text">server &#123;<br>    listen 443;<br>    # 你的域名<br>    server_name xxx.cn;<br>    ssl on;<br>    # 你网站的根目录<br>    root /usr/share/nginx/html; <br>    index index.html index.htm;<br>    ssl_certificate  cert/hk.uerlink.cn.pem;<br>    ssl_certificate_key cert/hk.uerlink.cn.key;<br>    ssl_session_timeout 5m;<br>    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;<br>    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;<br>    ssl_prefer_server_ciphers on;<br>&#125;<br></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;切换至root用户并安装nginx&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#切换至root用户并安装nginx&quot;&gt;&lt;/a&gt; 切换至root用户,并安装nginx&lt;/h3&gt;
&lt;p&gt;Nginx 在默认的 Ubuntu 源仓库中可用&lt;/</summary>
      
    
    
    
    <category term="文档区" scheme="http://uerlink.github.io/categories/%E6%96%87%E6%A1%A3%E5%8C%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>C++对一元二次求解</title>
    <link href="http://uerlink.github.io/2023/04/18/%E6%96%87%E6%A1%A3%E5%8C%BA/C++%E5%AF%B9%E4%B8%80%E5%85%83%E4%BA%8C%E6%AC%A1%E6%B1%82%E8%A7%A3/"/>
    <id>http://uerlink.github.io/2023/04/18/%E6%96%87%E6%A1%A3%E5%8C%BA/C++%E5%AF%B9%E4%B8%80%E5%85%83%E4%BA%8C%E6%AC%A1%E6%B1%82%E8%A7%A3/</id>
    <published>2023-04-17T16:00:00.000Z</published>
    <updated>2023-04-18T09:53:31.732Z</updated>
    
    <content type="html"><![CDATA[<h3 id="求解"><a class="markdownIt-Anchor" href="#求解"></a> 求解</h3><blockquote><p>2023-04-18 保存备份</p></blockquote><pre class="highlight"><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">operation_data</span><span class="hljs-params">(<span class="hljs-type">int</span> n,<span class="hljs-type">int</span> e,<span class="hljs-type">int</span> d)</span></span>&#123;<br>    <span class="hljs-comment">//定义文件对象</span><br>    ofstream outFile;<br>    <span class="hljs-comment">//题目数学公式转换</span><br>    <span class="hljs-comment">//n = p * q;</span><br>    <span class="hljs-comment">//e * d = (p-1)*(q-1)+1</span><br>    <span class="hljs-comment">//-(q*q) + [n+2-(e*d)]*q - n = 0</span><br><br>    <span class="hljs-type">int</span> a = <span class="hljs-number">-1</span>;<br>    <span class="hljs-type">double</span> b = (n + <span class="hljs-number">2</span> - (e * d));<br>    <span class="hljs-type">double</span> c = -n;<br>    <span class="hljs-comment">//求解</span><br>    <span class="hljs-type">double</span> q = (-b + <span class="hljs-built_in">sqrt</span>(b*b - <span class="hljs-number">4</span>*a*c))/<span class="hljs-number">2</span>*a;<br>    <span class="hljs-type">double</span> p = (-b - <span class="hljs-built_in">sqrt</span>(b*b - <span class="hljs-number">4</span>*a*c))/<span class="hljs-number">2</span>*a;<br>    <span class="hljs-comment">//打开文件</span><br>    outFile.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;decode.out&quot;</span>,ios::app);<br>    <span class="hljs-comment">//判断q和p是否为整数，如果为整数就保存，否则就保存&quot;NO&quot;</span><br>    <span class="hljs-comment">//floor() 函数返回不大于给定实数的最大整数</span><br>    <span class="hljs-keyword">if</span>(q == <span class="hljs-built_in">floor</span>(q) &amp;&amp; p == <span class="hljs-built_in">floor</span>(p))&#123;<br>        cout&lt;&lt;q&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;p&lt;&lt;endl;<br>        outFile &lt;&lt; q &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; p &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;NO&quot;</span>&lt;&lt;endl;<br>        outFile &lt;&lt; <span class="hljs-string">&quot;NO&quot;</span> &lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br>    outFile.<span class="hljs-built_in">close</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">//定义文件对象</span><br>    ifstream inFile;<br>    ofstream outFile;<br>    string line;<br>    <span class="hljs-type">int</span> Column=<span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> Row=<span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> arr[<span class="hljs-number">3</span>];<br><br><br>    <span class="hljs-comment">//清空decode.out文件的内容</span><br>    outFile.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;decode.out&quot;</span>,ios::trunc);<br>    outFile.<span class="hljs-built_in">close</span>();<br>    <span class="hljs-comment">//读取文件</span><br>    inFile.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;decode.in&quot;</span>, ios::in);<br>    <span class="hljs-keyword">if</span> (!inFile.<span class="hljs-built_in">is_open</span>())<br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;读取文件失败&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-comment">//getline可以文件文件内容保存每行的数据到line</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-built_in">getline</span>(inFile,line))<br>        &#123;<br>            <span class="hljs-comment">//使用stringstream</span><br>            stringstream <span class="hljs-built_in">ss</span>(line);<br>            <span class="hljs-comment">//读取当前行每列的内容，并保存到数组</span><br>            Column=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span> (ss &gt;&gt; arr[Column]) &#123;<br>                Column++;<br>            &#125;<br>            <span class="hljs-comment">//去除读取文件时开头的0，我也不知道为啥会有个0</span><br>            <span class="hljs-keyword">if</span>(Row!=<span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-comment">//执行数据计算函数</span><br>                <span class="hljs-built_in">operation_data</span>(arr[<span class="hljs-number">0</span>],arr[<span class="hljs-number">1</span>],arr[<span class="hljs-number">2</span>]);<br>            &#125;<br>            Row++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;求解&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#求解&quot;&gt;&lt;/a&gt; 求解&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;2023-04-18 保存备份&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;c</summary>
      
    
    
    
    <category term="文档区" scheme="http://uerlink.github.io/categories/%E6%96%87%E6%A1%A3%E5%8C%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>c++读取和保存数据到文件</title>
    <link href="http://uerlink.github.io/2023/04/18/%E6%96%87%E6%A1%A3%E5%8C%BA/c++%E8%AF%BB%E5%8F%96%E5%92%8C%E4%BF%9D%E5%AD%98%E6%95%B0%E6%8D%AE%E5%88%B0%E6%96%87%E4%BB%B6/"/>
    <id>http://uerlink.github.io/2023/04/18/%E6%96%87%E6%A1%A3%E5%8C%BA/c++%E8%AF%BB%E5%8F%96%E5%92%8C%E4%BF%9D%E5%AD%98%E6%95%B0%E6%8D%AE%E5%88%B0%E6%96%87%E4%BB%B6/</id>
    <published>2023-04-17T16:00:00.000Z</published>
    <updated>2023-04-18T10:00:51.226Z</updated>
    
    <content type="html"><![CDATA[<h3 id="c进行读取和保存"><a class="markdownIt-Anchor" href="#c进行读取和保存"></a> c++进行读取和保存</h3><p>使用<strong>fstream</strong>和<strong>sstream</strong></p><pre class="highlight"><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sstream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//------------读取文件----------</span><br>    <span class="hljs-comment">//定义文件对象</span><br>    ifstream inFile;<br>    ofstream outFile;<br>    string line;<br>    <span class="hljs-type">int</span> arr[<span class="hljs-number">3</span>];<br>    inFile.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;decode.in&quot;</span>, ios::in);<br><br>    <span class="hljs-keyword">if</span> (!inFile.<span class="hljs-built_in">is_open</span>())<br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;读取文件失败&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-comment">//getline可以文件文件内容保存每行的数据到line</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-built_in">getline</span>(inFile,line))<br>        &#123;<br>            <span class="hljs-comment">//使用stringstream</span><br>            stringstream <span class="hljs-built_in">ss</span>(line);<br>            <span class="hljs-comment">//读取当前行每列的内容，并保存到数组</span><br>            <span class="hljs-type">int</span> Column=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span> (ss &gt;&gt; arr[Column]) &#123;<br>                Column++;<br>            &#125;<br>        &#125;<br>    &#125;<br><span class="hljs-comment">// --------保存文件----------</span><br>    ofstream outFile;<br><br>    <span class="hljs-comment">//打开文件,ios::app是追加数据</span><br>    outFile.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;decode.out&quot;</span>,ios::app);<br><br>    <span class="hljs-comment">//存放数据</span><br>    outFile &lt;&lt;<span class="hljs-string">&quot;A&quot;</span>&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;<span class="hljs-string">&quot;B&quot;</span>&lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>    outFile.<span class="hljs-built_in">close</span>();<br><br>    <span class="hljs-comment">//清空decode.out文件的内容,ios::trunc</span><br>    outFile.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;decode.out&quot;</span>,ios::trunc);<br>    outFile.<span class="hljs-built_in">close</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;c进行读取和保存&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#c进行读取和保存&quot;&gt;&lt;/a&gt; c++进行读取和保存&lt;/h3&gt;
&lt;p&gt;使用&lt;strong&gt;fstream&lt;/strong&gt;和&lt;strong&gt;sstream&lt;/strong&gt;&lt;</summary>
      
    
    
    
    <category term="文档区" scheme="http://uerlink.github.io/categories/%E6%96%87%E6%A1%A3%E5%8C%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux下搭建frask框架</title>
    <link href="http://uerlink.github.io/2023/04/15/%E6%96%87%E6%A1%A3%E5%8C%BA/Linux%E4%B8%8B%E6%90%AD%E5%BB%BAfrask%E6%A1%86%E6%9E%B6/"/>
    <id>http://uerlink.github.io/2023/04/15/%E6%96%87%E6%A1%A3%E5%8C%BA/Linux%E4%B8%8B%E6%90%AD%E5%BB%BAfrask%E6%A1%86%E6%9E%B6/</id>
    <published>2023-04-14T16:00:00.000Z</published>
    <updated>2023-04-15T08:48:20.699Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装flask"><a class="markdownIt-Anchor" href="#安装flask"></a> 安装Flask</h3><h4 id="安装python和虚拟环境venv"><a class="markdownIt-Anchor" href="#安装python和虚拟环境venv"></a> 安装python和虚拟环境(venv)</h4><pre class="highlight"><code class="hljs shell">sudo apt install python3<br>sudo apt install python3-pip<br>sudo apt install python3-venv<br></code></pre><h4 id="创建虚拟环境"><a class="markdownIt-Anchor" href="#创建虚拟环境"></a> 创建虚拟环境</h4><ol><li>新建一个空白文件夹，并进入</li></ol><pre class="highlight"><code class="hljs shell">mkdir flask_app &amp;&amp; cd flask_app<br></code></pre><ol start="2"><li>创建一个名为venv的虚拟环境</li></ol><pre class="highlight"><code class="hljs shell">python3 -m venv venv<br></code></pre><h4 id="进入退出-虚拟环境"><a class="markdownIt-Anchor" href="#进入退出-虚拟环境"></a> 进入/退出 虚拟环境</h4><ul><li>进入</li></ul><pre class="highlight"><code class="hljs shell">source venv/bin/activate<br></code></pre><ul><li>退出</li></ul><pre class="highlight"><code class="hljs shell">deactivate<br></code></pre><h4 id="下载flask"><a class="markdownIt-Anchor" href="#下载flask"></a> 下载Flask</h4><ol><li>进入虚拟环境，使用pip工具安装flask</li></ol><pre class="highlight"><code class="hljs shell">pip install Flask<br></code></pre><ol start="2"><li>验证安装是否成功</li></ol><pre class="highlight"><code class="hljs shell">python -m flask --version<br></code></pre><h4 id="测试"><a class="markdownIt-Anchor" href="#测试"></a> 测试</h4><ol><li>创建一个最小应用程序，下面内容写入名为 <strong><a href="http://main.py">main.py</a></strong> 文件</li></ol><pre class="highlight"><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask <br>app = Flask(__name__) <br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>) </span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hello_world</span>(): <br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Hello World!&#x27;</span><br></code></pre><ol start="2"><li>设置<strong>FLASK_APP</strong>环境变量</li></ol><pre class="highlight"><code class="hljs shell">export FLASK_APP=main.py<br></code></pre><ol start="3"><li>运行应用</li></ol><pre class="highlight"><code class="hljs shell">flask run<br></code></pre><ol start="4"><li>访问生成的网站，测试完成</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;安装flask&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#安装flask&quot;&gt;&lt;/a&gt; 安装Flask&lt;/h3&gt;
&lt;h4 id=&quot;安装python和虚拟环境venv&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href</summary>
      
    
    
    
    <category term="文档区" scheme="http://uerlink.github.io/categories/%E6%96%87%E6%A1%A3%E5%8C%BA/"/>
    
    
    <category term="Linux" scheme="http://uerlink.github.io/tags/Linux/"/>
    
    <category term="python" scheme="http://uerlink.github.io/tags/python/"/>
    
    <category term="框架" scheme="http://uerlink.github.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="frask" scheme="http://uerlink.github.io/tags/frask/"/>
    
  </entry>
  
  <entry>
    <title>python接入chatgpt的api</title>
    <link href="http://uerlink.github.io/2023/04/15/%E6%96%87%E6%A1%A3%E5%8C%BA/python%E6%8E%A5%E5%85%A5chatgpt%E7%9A%84api/"/>
    <id>http://uerlink.github.io/2023/04/15/%E6%96%87%E6%A1%A3%E5%8C%BA/python%E6%8E%A5%E5%85%A5chatgpt%E7%9A%84api/</id>
    <published>2023-04-14T16:00:00.000Z</published>
    <updated>2023-04-15T08:46:57.712Z</updated>
    
    <content type="html"><![CDATA[<h3 id="非流式响应"><a class="markdownIt-Anchor" href="#非流式响应"></a> 非流式响应</h3><pre class="highlight"><code class="hljs python"><span class="hljs-keyword">import</span> openai<br><br>openai.api_key = <span class="hljs-string">&quot;这里放入你的API Key，注意要保留双引号&quot;</span> <br><br>completion = openai.ChatCompletion.create(<br>  model=<span class="hljs-string">&quot;gpt-3.5-turbo&quot;</span>, <br>  messages=[&#123;<span class="hljs-string">&quot;role&quot;</span>: <span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;content&quot;</span>: <span class="hljs-string">&quot;知乎是什么？&quot;</span>&#125;]<br>)<br><br><span class="hljs-comment"># 将得到的openai对象转换成python字典  </span><br>data_json = completion.to_dict()<br><span class="hljs-built_in">print</span>(data_json)<br></code></pre><h4 id="可运行代码"><a class="markdownIt-Anchor" href="#可运行代码"></a> 可运行代码</h4><pre class="highlight"><code class="hljs python"><span class="hljs-keyword">import</span> openai<br>openai.api_key = <span class="hljs-string">&quot;sk&quot;</span><br>question: <span class="hljs-built_in">str</span> = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;问题: &quot;</span>)<br><br>completion = openai.ChatCompletion.create(<br>  model=<span class="hljs-string">&quot;gpt-3.5-turbo&quot;</span>,<br>  messages=[&#123;<span class="hljs-string">&quot;role&quot;</span>: <span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;content&quot;</span>: question&#125;]<br>)<br><span class="hljs-comment"># 将得到的openai对象转换成python字典</span><br>data_json = completion.to_dict()<br>data_json = data_json[<span class="hljs-string">&#x27;choices&#x27;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;message&#x27;</span>][<span class="hljs-string">&#x27;content&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;AI: &quot;</span> + data_json)<br><br></code></pre><h3 id="流式响应"><a class="markdownIt-Anchor" href="#流式响应"></a> 流式响应</h3><pre class="highlight"><code class="hljs python"><span class="hljs-keyword">import</span> openai<br><br>openai.api_key = <span class="hljs-string">&quot;这里放入你的API Key，注意要保留双引号&quot;</span> <br><br>completion = openai.ChatCompletion.create(<br>  model=<span class="hljs-string">&quot;gpt-3.5-turbo&quot;</span>, <br>  messages=[&#123;<span class="hljs-string">&quot;role&quot;</span>: <span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;content&quot;</span>: <span class="hljs-string">&quot;知乎是什么？&quot;</span>&#125;]<br>)<br><br><span class="hljs-comment"># 将得到的openai对象转换成python字典  </span><br>data_json = completion.to_dict()<br><span class="hljs-built_in">print</span>(data_json)<br></code></pre><h4 id="可运行代码-2"><a class="markdownIt-Anchor" href="#可运行代码-2"></a> 可运行代码</h4><pre class="highlight"><code class="hljs python"><span class="hljs-keyword">import</span> openai  <br>  <br>openai.api_key = <span class="hljs-string">&quot;sk-AmHHPxId&quot;</span>  <br>question: <span class="hljs-built_in">str</span> = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;问题: &quot;</span>)  <br>completion = openai.ChatCompletion.create(  <br>model=<span class="hljs-string">&quot;gpt-3.5-turbo&quot;</span>,  <br>stream=<span class="hljs-literal">True</span>,  <br>messages=[&#123;<span class="hljs-string">&quot;role&quot;</span>: <span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;content&quot;</span>: question&#125;]  <br>)  <br>  <br>collected_events = [] <span class="hljs-comment"># 响应接收区  </span><br>stream_result = <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-comment"># 保存流式输出的总结果  </span><br><span class="hljs-keyword">for</span> event <span class="hljs-keyword">in</span> completion:  <br>collected_events.append(event) <span class="hljs-comment"># 保存事件响应  </span><br>data_dict = event.to_dict() <span class="hljs-comment"># 转换响应为字典  </span><br>data_openai_object = data_dict[<span class="hljs-string">&#x27;choices&#x27;</span>][<span class="hljs-number">0</span>] <span class="hljs-comment"># 获取choices的值  </span><br>data_json = data_openai_object.to_dict() <span class="hljs-comment"># 转换openai_object为字典  </span><br>data_openai_object = data_json[<span class="hljs-string">&#x27;delta&#x27;</span>] <span class="hljs-comment"># 获取delta的值  </span><br>finish_reason = data_json[<span class="hljs-string">&#x27;finish_reason&#x27;</span>] <span class="hljs-comment"># 获取finish的值,用于判断是否传输结束  </span><br>data_json = data_openai_object.to_dict() <span class="hljs-comment"># 转换openai_object为字典  </span><br>segmental_result = data_json.get(<span class="hljs-string">&#x27;content&#x27;</span>, <span class="hljs-string">&quot;null&quot;</span>) <span class="hljs-comment"># 获取content的值，如果没有就返回null  </span><br>  <br><span class="hljs-keyword">if</span>(segmental_result != <span class="hljs-string">&quot;null&quot;</span>): <span class="hljs-comment"># 判断“分段结果”内是否有内容，有就输出  </span><br><span class="hljs-built_in">print</span>(segmental_result, end=<span class="hljs-string">&quot;&quot;</span>) <span class="hljs-comment"># 输出“分段结果“的内容  </span><br><span class="hljs-keyword">else</span>:  <br><span class="hljs-keyword">if</span> (finish_reason == <span class="hljs-string">&quot;stop&quot;</span>):  <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n 结束对话&quot;</span>)  <br>  <br></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;非流式响应&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#非流式响应&quot;&gt;&lt;/a&gt; 非流式响应&lt;/h3&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;hljs python&quot;&gt;&lt;span class=&quot;hljs</summary>
      
    
    
    
    <category term="文档区" scheme="http://uerlink.github.io/categories/%E6%96%87%E6%A1%A3%E5%8C%BA/"/>
    
    
    <category term="AI" scheme="http://uerlink.github.io/tags/AI/"/>
    
    <category term="GPT" scheme="http://uerlink.github.io/tags/GPT/"/>
    
  </entry>
  
</feed>
