<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>UerLink_Blog</title>
  
  
  <link href="http://uerlink.github.io/atom.xml" rel="self"/>
  
  <link href="http://uerlink.github.io/"/>
  <updated>2023-06-13T14:51:12.049Z</updated>
  <id>http://uerlink.github.io/</id>
  
  <author>
    <name>UerLink</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>arduino下载到esp8266报错</title>
    <link href="http://uerlink.github.io/2023/06/13/%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/arduino%E4%B8%8B%E8%BD%BD%E5%88%B0esp8266%E6%8A%A5%E9%94%99/"/>
    <id>http://uerlink.github.io/2023/06/13/%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/arduino%E4%B8%8B%E8%BD%BD%E5%88%B0esp8266%E6%8A%A5%E9%94%99/</id>
    <published>2023-06-12T16:00:00.000Z</published>
    <updated>2023-06-13T14:51:12.049Z</updated>
    
    <content type="html"><![CDATA[<h3 id="错误日志"><a class="markdownIt-Anchor" href="#错误日志"></a> 错误日志：</h3><pre class="highlight"><code class="hljs css"><span class="hljs-selector-tag">A</span> fatal esptool<span class="hljs-selector-class">.py</span> error occurred: Cannot configure port, something went wrong. Original message: <span class="hljs-built_in">PermissionError</span>(<span class="hljs-number">13</span>, <span class="hljs-string">&#x27;����ϵͳ�ϵ��豸û�з������á�&#x27;</span>, None, <span class="hljs-number">31</span>)<br></code></pre><h3 id="解决办法"><a class="markdownIt-Anchor" href="#解决办法"></a> 解决办法：</h3><p>重新安装ch340驱动，（注意需要安装<strong>老版本的ch340驱动</strong>）</p><p>下载链接：<a href="https://electropeak.com/learn/download/ch341ser-zip/#">CH341SER.zip - Electropeak</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;错误日志&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#错误日志&quot;&gt;&lt;/a&gt; 错误日志：&lt;/h3&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;hljs css&quot;&gt;&lt;span class=&quot;hljs-sele</summary>
      
    
    
    
    <category term="踩坑记录" scheme="http://uerlink.github.io/categories/%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="踩坑记录" scheme="http://uerlink.github.io/tags/%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
    
    <category term="arduino" scheme="http://uerlink.github.io/tags/arduino/"/>
    
  </entry>
  
  <entry>
    <title>Stable Diffusion模型-AI画画</title>
    <link href="http://uerlink.github.io/2023/06/09/%E6%96%87%E6%A1%A3%E5%8C%BA/Stable%20Diffusion%E6%A8%A1%E5%9E%8B-AI%E7%94%BB%E7%94%BB/"/>
    <id>http://uerlink.github.io/2023/06/09/%E6%96%87%E6%A1%A3%E5%8C%BA/Stable%20Diffusion%E6%A8%A1%E5%9E%8B-AI%E7%94%BB%E7%94%BB/</id>
    <published>2023-06-08T16:00:00.000Z</published>
    <updated>2023-06-13T12:59:31.121Z</updated>
    
    <content type="html"><![CDATA[<h1 id="stable-diffusion模型-ai画画"><a class="markdownIt-Anchor" href="#stable-diffusion模型-ai画画"></a> Stable Diffusion模型-AI画画</h1><h3 id="ai画画笔记"><a class="markdownIt-Anchor" href="#ai画画笔记"></a> AI画画笔记</h3><p>[<img src="https://s1.ax1x.com/2023/06/13/pCmRYWV.png" alt="pCmRYWV.png" / srcset="https://s1.ax1x.com/2022/05/03/OAe0fI.png" data-src="https://s1.ax1x.com/2023/06/13/pCmRYWV.png" class="lozad post-image"></p><h3 id="下载整合包"><a class="markdownIt-Anchor" href="#下载整合包"></a> 下载整合包</h3><p>首先下载“电子菩萨” – <strong>秋葉aaaki</strong>  的 整合包</p><p><a href="https://space.bilibili.com/12566101">秋葉aaaki的个人空间_哔哩哔哩_bilibili</a></p><p><a href="https://www.bilibili.com/video/BV1iM4y1y7oA/?spm_id_from=333.999.0.0">【AI绘画】Stable Diffusion整合包v4发布！全新加速 解压即用 防爆显存 三分钟入门AI绘画 ☆可更新 ☆训练 ☆汉化_哔哩哔哩_bilibili</a></p><h4 id="踩坑的问题"><a class="markdownIt-Anchor" href="#踩坑的问题"></a> 踩坑的问题</h4><p>下载下来的整合包.zip 一直解压错误，后来更换下载器重新下载就可以了</p><h3 id="新知识"><a class="markdownIt-Anchor" href="#新知识"></a> 新知识</h3><h4 id="1更换绘画模型"><a class="markdownIt-Anchor" href="#1更换绘画模型"></a> 1.更换绘画模型</h4><p><a href="https://www.liandange.com/">炼丹阁</a></p><blockquote><p>国内的模型下载网站</p></blockquote><p><a href="https://huggingface.co/xiaolxl/GuoFeng3">Hugging Face</a></p><blockquote><p>国外的模型下载网站<br />我也没太弄懂</p></blockquote><h4 id="2lora模型"><a class="markdownIt-Anchor" href="#2lora模型"></a> 2.LoRA模型</h4><p>LoRA相当于对图像进行风格化修改</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;stable-diffusion模型-ai画画&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#stable-diffusion模型-ai画画&quot;&gt;&lt;/a&gt; Stable Diffusion模型-AI画画&lt;/h1&gt;
&lt;h3 id=&quot;ai画画</summary>
      
    
    
    
    <category term="文档区" scheme="http://uerlink.github.io/categories/%E6%96%87%E6%A1%A3%E5%8C%BA/"/>
    
    
    <category term="AI" scheme="http://uerlink.github.io/tags/AI/"/>
    
    <category term="画画" scheme="http://uerlink.github.io/tags/%E7%94%BB%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>webmin工具的安装</title>
    <link href="http://uerlink.github.io/2023/05/23/%E6%96%87%E6%A1%A3%E5%8C%BA/webmin%E5%B7%A5%E5%85%B7%E7%9A%84%E5%AE%89%E8%A3%85/"/>
    <id>http://uerlink.github.io/2023/05/23/%E6%96%87%E6%A1%A3%E5%8C%BA/webmin%E5%B7%A5%E5%85%B7%E7%9A%84%E5%AE%89%E8%A3%85/</id>
    <published>2023-05-22T16:00:00.000Z</published>
    <updated>2023-05-23T01:20:22.213Z</updated>
    
    <content type="html"><![CDATA[<h1 id="通过webmin工具远程管理配置服务器"><a class="markdownIt-Anchor" href="#通过webmin工具远程管理配置服务器"></a> 通过webmin工具远程管理配置服务器</h1><h3 id="安装配置面板-webmin"><a class="markdownIt-Anchor" href="#安装配置面板-webmin"></a> 安装配置面板 WebMin</h3><h4 id="使用deb包进行安装"><a class="markdownIt-Anchor" href="#使用deb包进行安装"></a> 使用deb包进行安装</h4><p>下载路径：<a href="http://sourceforge.net/projects/webadmin/files/webmin/">http://sourceforge.net/projects/webadmin/files/webmin/</a></p><pre class="highlight"><code class="hljs bash">sudo dpkg -i webmin_1.981_all.deb<br></code></pre><p>处理依赖关系</p><pre class="highlight"><code class="hljs bash">sudo apt install -f<br></code></pre><h4 id="启动服务"><a class="markdownIt-Anchor" href="#启动服务"></a> 启动服务</h4><p>开启端口10000</p><pre class="highlight"><code class="hljs bash">sudo ufw allow 10000<br></code></pre><p>重启</p><pre class="highlight"><code class="hljs bash">reboot<br></code></pre><p>登录</p><pre class="highlight"><code class="hljs bash">https：//服务器 ip：10000<br></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;通过webmin工具远程管理配置服务器&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#通过webmin工具远程管理配置服务器&quot;&gt;&lt;/a&gt; 通过webmin工具远程管理配置服务器&lt;/h1&gt;
&lt;h3 id=&quot;安装配置面板-webmin&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="文档区" scheme="http://uerlink.github.io/categories/%E6%96%87%E6%A1%A3%E5%8C%BA/"/>
    
    
    <category term="Linux" scheme="http://uerlink.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu安装nginx，部署网站</title>
    <link href="http://uerlink.github.io/2023/04/26/%E6%96%87%E6%A1%A3%E5%8C%BA/Ubuntu%E5%AE%89%E8%A3%85nginx%EF%BC%8C%E9%83%A8%E7%BD%B2%E7%BD%91%E7%AB%99/"/>
    <id>http://uerlink.github.io/2023/04/26/%E6%96%87%E6%A1%A3%E5%8C%BA/Ubuntu%E5%AE%89%E8%A3%85nginx%EF%BC%8C%E9%83%A8%E7%BD%B2%E7%BD%91%E7%AB%99/</id>
    <published>2023-04-25T16:00:00.000Z</published>
    <updated>2023-05-04T16:06:38.631Z</updated>
    
    <content type="html"><![CDATA[<h3 id="切换至root用户并安装nginx"><a class="markdownIt-Anchor" href="#切换至root用户并安装nginx"></a> 切换至root用户,并安装nginx</h3><p>Nginx 在默认的 Ubuntu 源仓库中可用</p><pre class="highlight"><code class="hljs bash">sudo apt update<br>sudo su root<br>apt-get install nginx<br></code></pre><h3 id="查看nginx是否安装成功"><a class="markdownIt-Anchor" href="#查看nginx是否安装成功"></a> 查看nginx是否安装成功</h3><pre class="highlight"><code class="hljs ebnf"><span class="hljs-attribute">nginx -v</span><br></code></pre><h3 id="运行控制"><a class="markdownIt-Anchor" href="#运行控制"></a> 运行控制</h3><h4 id="启动nginx"><a class="markdownIt-Anchor" href="#启动nginx"></a> 启动nginx</h4><pre class="highlight"><code class="hljs crmsh">service nginx <span class="hljs-literal">start</span><br></code></pre><h4 id="各种重启"><a class="markdownIt-Anchor" href="#各种重启"></a> 各种重启</h4><pre class="highlight"><code class="hljs maxima">service nginx <span class="hljs-built_in">restart</span><br><br>sudo systemctl <span class="hljs-built_in">restart</span> nginx<br><br>nginx -s reload<br></code></pre><h4 id="停止"><a class="markdownIt-Anchor" href="#停止"></a> 停止</h4><pre class="highlight"><code class="hljs arduino">service nginx stop<br></code></pre><h3 id="nginx文件安装完成之后的文件位置"><a class="markdownIt-Anchor" href="#nginx文件安装完成之后的文件位置"></a> nginx文件安装完成之后的文件位置：</h3><p>/usr/sbin/nginx：主程序<br />/etc/nginx：存放配置文件<br />/usr/share/nginx：存放静态文件<br />/var/log/nginx：存放日志</p><h4 id="配置网站"><a class="markdownIt-Anchor" href="#配置网站"></a> 配置网站</h4><p>在/etc/nginx/conf.d目录中新建后缀名为 .conf 的空白文件 test.conf<br />写入配置表</p><pre class="highlight"><code class="hljs txt">server &#123;<br>    listen       80;<br>    server_name  example.com;<br>    #开启openai接口的gzip压缩，大量重复文本的压缩率高，节省服务端流量<br>    gzip  on;<br>    gzip_min_length 1k;<br>    gzip_types text/event-stream;<br><br>    #如需部署在网站子路径，如&quot;example.com/chatgpt&quot;，配置如下<br>    #location ^~ /chatgpt/v1 &#123;<br>    location ^~ /v1 &#123;<br>        proxy_pass https://api.openai.com/v1;<br>        proxy_set_header Host api.openai.com;<br>        proxy_ssl_name api.openai.com;<br>        proxy_ssl_server_name on;<br>        #注意Bearer 后改为正确的token。如需网页设置自定义API key使用，则注释掉下一行<br>        proxy_set_header  Authorization &quot;Bearer sk-your-token&quot;;<br>        proxy_pass_header Authorization;<br>        #流式传输，不关闭buffering缓存会卡顿卡死，必须配置！！！<br>        proxy_buffering off;<br>    &#125;<br>    #与上面反代接口的路径保持一致<br>    #location /chatgpt &#123;<br>    location / &#123;<br>        alias /usr/share/nginx/html/;<br>        index index.html;<br>    &#125;<br>&#125;<br></code></pre><p>检查配置是否生效</p><pre class="highlight"><code class="hljs ebnf"><span class="hljs-attribute">nginx -t</span><br><br></code></pre><h5 id="配置ssl证书"><a class="markdownIt-Anchor" href="#配置ssl证书"></a> 配置ssl证书</h5><p>参考教程链接：<a href="https://zhuanlan.zhihu.com/p/85040625">Nginx操作 | Nginx配置SSL证书 - 知乎 (zhihu.com)</a></p><p>配置完以后要重启</p><pre class="highlight"><code class="hljs bash">sudo service nginx restart<br></code></pre><p>注意ssl认证文件的路径要正确</p><pre class="highlight"><code class="hljs text">server &#123;<br>    listen 443;<br>    # 你的域名<br>    server_name xxx.cn;<br>    ssl on;<br>    # 你网站的根目录<br>    root /usr/share/nginx/html; <br>    index index.html index.htm;<br>    ssl_certificate  cert/hk.uerlink.cn.pem;<br>    ssl_certificate_key cert/hk.uerlink.cn.key;<br>    ssl_session_timeout 5m;<br>    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;<br>    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;<br>    ssl_prefer_server_ciphers on;<br>&#125;<br></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;切换至root用户并安装nginx&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#切换至root用户并安装nginx&quot;&gt;&lt;/a&gt; 切换至root用户,并安装nginx&lt;/h3&gt;
&lt;p&gt;Nginx 在默认的 Ubuntu 源仓库中可用&lt;/</summary>
      
    
    
    
    <category term="文档区" scheme="http://uerlink.github.io/categories/%E6%96%87%E6%A1%A3%E5%8C%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>C++对一元二次求解</title>
    <link href="http://uerlink.github.io/2023/04/18/%E6%96%87%E6%A1%A3%E5%8C%BA/C++%E5%AF%B9%E4%B8%80%E5%85%83%E4%BA%8C%E6%AC%A1%E6%B1%82%E8%A7%A3/"/>
    <id>http://uerlink.github.io/2023/04/18/%E6%96%87%E6%A1%A3%E5%8C%BA/C++%E5%AF%B9%E4%B8%80%E5%85%83%E4%BA%8C%E6%AC%A1%E6%B1%82%E8%A7%A3/</id>
    <published>2023-04-17T16:00:00.000Z</published>
    <updated>2023-04-18T09:53:31.732Z</updated>
    
    <content type="html"><![CDATA[<h3 id="求解"><a class="markdownIt-Anchor" href="#求解"></a> 求解</h3><blockquote><p>2023-04-18 保存备份</p></blockquote><pre class="highlight"><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">operation_data</span><span class="hljs-params">(<span class="hljs-type">int</span> n,<span class="hljs-type">int</span> e,<span class="hljs-type">int</span> d)</span></span>&#123;<br>    <span class="hljs-comment">//定义文件对象</span><br>    ofstream outFile;<br>    <span class="hljs-comment">//题目数学公式转换</span><br>    <span class="hljs-comment">//n = p * q;</span><br>    <span class="hljs-comment">//e * d = (p-1)*(q-1)+1</span><br>    <span class="hljs-comment">//-(q*q) + [n+2-(e*d)]*q - n = 0</span><br><br>    <span class="hljs-type">int</span> a = <span class="hljs-number">-1</span>;<br>    <span class="hljs-type">double</span> b = (n + <span class="hljs-number">2</span> - (e * d));<br>    <span class="hljs-type">double</span> c = -n;<br>    <span class="hljs-comment">//求解</span><br>    <span class="hljs-type">double</span> q = (-b + <span class="hljs-built_in">sqrt</span>(b*b - <span class="hljs-number">4</span>*a*c))/<span class="hljs-number">2</span>*a;<br>    <span class="hljs-type">double</span> p = (-b - <span class="hljs-built_in">sqrt</span>(b*b - <span class="hljs-number">4</span>*a*c))/<span class="hljs-number">2</span>*a;<br>    <span class="hljs-comment">//打开文件</span><br>    outFile.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;decode.out&quot;</span>,ios::app);<br>    <span class="hljs-comment">//判断q和p是否为整数，如果为整数就保存，否则就保存&quot;NO&quot;</span><br>    <span class="hljs-comment">//floor() 函数返回不大于给定实数的最大整数</span><br>    <span class="hljs-keyword">if</span>(q == <span class="hljs-built_in">floor</span>(q) &amp;&amp; p == <span class="hljs-built_in">floor</span>(p))&#123;<br>        cout&lt;&lt;q&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;p&lt;&lt;endl;<br>        outFile &lt;&lt; q &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; p &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;NO&quot;</span>&lt;&lt;endl;<br>        outFile &lt;&lt; <span class="hljs-string">&quot;NO&quot;</span> &lt;&lt;<span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br>    outFile.<span class="hljs-built_in">close</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">//定义文件对象</span><br>    ifstream inFile;<br>    ofstream outFile;<br>    string line;<br>    <span class="hljs-type">int</span> Column=<span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> Row=<span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> arr[<span class="hljs-number">3</span>];<br><br><br>    <span class="hljs-comment">//清空decode.out文件的内容</span><br>    outFile.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;decode.out&quot;</span>,ios::trunc);<br>    outFile.<span class="hljs-built_in">close</span>();<br>    <span class="hljs-comment">//读取文件</span><br>    inFile.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;decode.in&quot;</span>, ios::in);<br>    <span class="hljs-keyword">if</span> (!inFile.<span class="hljs-built_in">is_open</span>())<br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;读取文件失败&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-comment">//getline可以文件文件内容保存每行的数据到line</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-built_in">getline</span>(inFile,line))<br>        &#123;<br>            <span class="hljs-comment">//使用stringstream</span><br>            stringstream <span class="hljs-built_in">ss</span>(line);<br>            <span class="hljs-comment">//读取当前行每列的内容，并保存到数组</span><br>            Column=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span> (ss &gt;&gt; arr[Column]) &#123;<br>                Column++;<br>            &#125;<br>            <span class="hljs-comment">//去除读取文件时开头的0，我也不知道为啥会有个0</span><br>            <span class="hljs-keyword">if</span>(Row!=<span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-comment">//执行数据计算函数</span><br>                <span class="hljs-built_in">operation_data</span>(arr[<span class="hljs-number">0</span>],arr[<span class="hljs-number">1</span>],arr[<span class="hljs-number">2</span>]);<br>            &#125;<br>            Row++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;求解&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#求解&quot;&gt;&lt;/a&gt; 求解&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;2023-04-18 保存备份&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;c</summary>
      
    
    
    
    <category term="文档区" scheme="http://uerlink.github.io/categories/%E6%96%87%E6%A1%A3%E5%8C%BA/"/>
    
    
  </entry>
  
</feed>
