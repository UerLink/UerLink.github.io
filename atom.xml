<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>UerLink_Blog</title>
  
  
  <link href="http://uerlink.github.io/atom.xml" rel="self"/>
  
  <link href="http://uerlink.github.io/"/>
  <updated>2023-08-03T16:29:39.130Z</updated>
  <id>http://uerlink.github.io/</id>
  
  <author>
    <name>UerLink</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PCB贴片焊接练习</title>
    <link href="http://uerlink.github.io/2023/08/04/%E6%96%87%E6%A1%A3%E5%8C%BA/2023-08-03_PCB%E8%B4%B4%E7%89%87%E7%84%8A%E6%8E%A5%E7%BB%83%E4%B9%A0/"/>
    <id>http://uerlink.github.io/2023/08/04/%E6%96%87%E6%A1%A3%E5%8C%BA/2023-08-03_PCB%E8%B4%B4%E7%89%87%E7%84%8A%E6%8E%A5%E7%BB%83%E4%B9%A0/</id>
    <published>2023-08-03T16:00:00.000Z</published>
    <updated>2023-08-03T16:29:39.130Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常用贴片元器件焊接练习技巧记录"><a class="markdownIt-Anchor" href="#常用贴片元器件焊接练习技巧记录"></a> 常用贴片元器件焊接练习技巧记录</h1><h4 id="视频如下"><a class="markdownIt-Anchor" href="#视频如下"></a> 视频如下：</h4><div><iframe src="//player.bilibili.com/player.html?aid=346646950&bvid=BV1aR4y1X7wN&cid=866348877&page=1" allowfullscreen="allowfullscreen" width="100%" height="450" scrolling="no" frameborder="0" framespacing="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts" allowfullscreen="true"></iframe></div><p>【贴片集成IC如何用电烙铁焊接？掌握这些技巧，几分钟从入门到熟练】 <a href="https://www.bilibili.com/video/BV1aR4y1X7wN/?share_source=copy_web&amp;vd_source=17fc3f0d3cf17f45237a57cc5ba97e0e">https://www.bilibili.com/video/BV1aR4y1X7wN/?share_source=copy_web&amp;vd_source=17fc3f0d3cf17f45237a57cc5ba97e0e</a></p><h3 id="0805封装下的贴片电阻电容"><a class="markdownIt-Anchor" href="#0805封装下的贴片电阻电容"></a> 0805封装下的贴片电阻，电容</h3><ol><li>先在焊头挂一点锡，挂不住可以沾点助焊剂</li><li>再焊盘一端点上一点锡，另一端先不管</li><li>镊子夹住元器件，放好位置</li><li>焊头点上一点助焊剂，焊盘上的锡融化，固定好元器件</li><li>pcb转180度，焊接另一半，左手拿锡丝，挂到焊头上。焊头再把锡挂到元器件上</li></ol><h4 id="特殊情况"><a class="markdownIt-Anchor" href="#特殊情况"></a> 特殊情况</h4><p><strong>注意</strong>：镊子要夹稳，一点要固定好元器件再焊另一端，不然元器件会沾到焊头上去了<br /><strong>处理点锡拉尖</strong>：焊头沾一点锡膏，再把尖头压下去。</p><h3 id="多引脚芯片焊接"><a class="markdownIt-Anchor" href="#多引脚芯片焊接"></a> 多引脚芯片焊接</h3><ol><li>先摆好芯片，然后固定芯片的对角线引脚</li><li>刷上助焊剂，采用拖焊技巧，对芯片进行焊接</li></ol><h4 id="特殊情况-2"><a class="markdownIt-Anchor" href="#特殊情况-2"></a> 特殊情况</h4><p><strong>注意</strong>：芯片焊接时，最长时间不要超过3秒，温度260~350，可轻微的用手指感受一下芯片温度，过烫就让芯片冷却再焊接</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;常用贴片元器件焊接练习技巧记录&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#常用贴片元器件焊接练习技巧记录&quot;&gt;&lt;/a&gt; 常用贴片元器件焊接练习技巧记录&lt;/h1&gt;
&lt;h4 id=&quot;视频如下&quot;&gt;&lt;a class=&quot;markdownIt-A</summary>
      
    
    
    
    <category term="文档区" scheme="http://uerlink.github.io/categories/%E6%96%87%E6%A1%A3%E5%8C%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>mod开发笔记</title>
    <link href="http://uerlink.github.io/2023/08/02/%E6%96%87%E6%A1%A3%E5%8C%BA/2023-08-02_mod%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    <id>http://uerlink.github.io/2023/08/02/%E6%96%87%E6%A1%A3%E5%8C%BA/2023-08-02_mod%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/</id>
    <published>2023-08-01T16:00:00.000Z</published>
    <updated>2023-08-02T14:19:53.049Z</updated>
    
    <content type="html"><![CDATA[<h1 id="星露谷物语mod开发"><a class="markdownIt-Anchor" href="#星露谷物语mod开发"></a> 星露谷物语mod开发</h1><h3 id="每天早晨打印一条消息的代码"><a class="markdownIt-Anchor" href="#每天早晨打印一条消息的代码"></a> 每天早晨打印一条消息的代码</h3><pre class="highlight"><code class="hljs C#"><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span>模组的主要入口点。<span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ModEntry</span> : <span class="hljs-title">Mod</span><br>&#123;<br>    <span class="hljs-comment">/**********</span><br><span class="hljs-comment">    ** 公共方法</span><br><span class="hljs-comment">    *********/</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span>模组入口点，加载模组后自动调用<span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;helper&quot;&gt;</span>提供用于编写模组的简化API<span class="hljs-doctag">&lt;/param&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Entry</span>(<span class="hljs-params">IModHelper helper</span>)</span><br>    &#123;<br>        <span class="hljs-comment">// 事件 += 方法</span><br>        helper.Events.GameLoop.DayStarted += <span class="hljs-keyword">this</span>.OnDayStarted;<br>    &#125;<br>    <br>    <span class="hljs-comment">/**********</span><br><span class="hljs-comment">    ** 私有方法</span><br><span class="hljs-comment">    *********/</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span>在新的一天开始后调用的方法<span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;sender&quot;&gt;</span>事件对象<span class="hljs-doctag">&lt;/param&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;e&quot;&gt;</span>事件参数<span class="hljs-doctag">&lt;/param&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnDayStarted</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, DayStartedEventArgs e</span>)</span><br>    &#123;<br>       <span class="hljs-keyword">this</span>.Monitor.Log(<span class="hljs-string">$&quot;新的一天到来了！<span class="hljs-subst">&#123;Game1.player.Name&#125;</span> 享受你的新一天吧&quot;</span>, LogLevel.Debug);<br>    &#125;<br>&#125;<br></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;星露谷物语mod开发&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#星露谷物语mod开发&quot;&gt;&lt;/a&gt; 星露谷物语mod开发&lt;/h1&gt;
&lt;h3 id=&quot;每天早晨打印一条消息的代码&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot;</summary>
      
    
    
    
    <category term="文档区" scheme="http://uerlink.github.io/categories/%E6%96%87%E6%A1%A3%E5%8C%BA/"/>
    
    
    <category term="mod" scheme="http://uerlink.github.io/tags/mod/"/>
    
    <category term="game" scheme="http://uerlink.github.io/tags/game/"/>
    
  </entry>
  
  <entry>
    <title>算法练习</title>
    <link href="http://uerlink.github.io/2023/08/02/%E6%96%87%E6%A1%A3%E5%8C%BA/2023-08-02_%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/"/>
    <id>http://uerlink.github.io/2023/08/02/%E6%96%87%E6%A1%A3%E5%8C%BA/2023-08-02_%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/</id>
    <published>2023-08-01T16:00:00.000Z</published>
    <updated>2023-08-02T14:31:10.861Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简单算法练习"><a class="markdownIt-Anchor" href="#简单算法练习"></a> 简单算法练习</h1><h3 id="习题5-2"><a class="markdownIt-Anchor" href="#习题5-2"></a> 习题5-2</h3><p>分式化简。设计算法，将一个给定的真分数化简为最简分数形式，例如将6/8 化简为 3/4，使用C++语言</p><h4 id="关键代码辗转相除法必背"><a class="markdownIt-Anchor" href="#关键代码辗转相除法必背"></a> 关键代码(辗转相除法)（必背）</h4><p>gcd函数导入a，b，判断b是否等于0，如果等于就返回a的值，然后接着执行gcd函数将b填入a，a % b</p><pre class="highlight"><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (b == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> a;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">gcd</span>(b, a % b);<br>&#125;<br></code></pre><h4 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h4><pre class="highlight"><code class="hljs c++"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br><br>    <span class="hljs-keyword">if</span> (b == <span class="hljs-number">0</span>) &#123;<br><br>        <span class="hljs-keyword">return</span> a;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">gcd</span>(b, a % b);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> x, y;<br>    cout &lt;&lt; <span class="hljs-string">&quot;请输入分子和分母：&quot;</span> &lt;&lt; endl;<br>    cin &gt;&gt; x &gt;&gt; y;<br>    <span class="hljs-type">int</span> g = <span class="hljs-built_in">gcd</span>(x, y);<br>    x /= g;<br>    y /= g;<br>    cout &lt;&lt; x &lt;&lt; <span class="hljs-string">&quot;/&quot;</span> &lt;&lt; y &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre><h4 id="解释"><a class="markdownIt-Anchor" href="#解释"></a> 解释</h4><pre class="highlight"><code class="hljs C++"><br><span class="hljs-number">1.</span> 求出分子和分母的最大公约数（使用辗转相除法）。<br><br><span class="hljs-number">2.</span> 将分子和分母同时除以最大公约数，得到最简分数形式。<br><br></code></pre><h3 id="习题5-3"><a class="markdownIt-Anchor" href="#习题5-3"></a> 习题5-3</h3><p>设计算法，判断一个大整数能否被11整除。可以采用以下方法：将该数的十进制表示从右端开始，每两位一组构成一个整数，然后将这些数相加，判断其能否被11整除，例如将562843748 分割成 5，62，84，37，48，然后判断（5+62+84+37+48）能否被11整除</p><h4 id="关键代码必背"><a class="markdownIt-Anchor" href="#关键代码必背"></a> 关键代码（必背）</h4><pre class="highlight"><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">divisible</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (n &gt; <span class="hljs-number">0</span>) &#123;<br>        sum += n % <span class="hljs-number">100</span>;<br>        n /= <span class="hljs-number">100</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> (sum % <span class="hljs-number">11</span> == <span class="hljs-number">0</span>);<br>&#125;<br><br></code></pre><h4 id="代码-2"><a class="markdownIt-Anchor" href="#代码-2"></a> 代码</h4><pre class="highlight"><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">divisible</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (n &gt; <span class="hljs-number">0</span>) &#123;<br>        sum += n % <span class="hljs-number">100</span>;<br>        n /= <span class="hljs-number">100</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> (sum % <span class="hljs-number">11</span> == <span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">divisible</span>(n)) &#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;可以被11整除&quot;</span>&lt;&lt;endl;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;不可以被11整除&quot;</span>&lt;&lt;endl;<br>    &#125;<br>&#125;<br></code></pre><h4 id="解释-2"><a class="markdownIt-Anchor" href="#解释-2"></a> 解释</h4><pre class="highlight"><code class="hljs excel"><span class="hljs-number">1</span>. 初始化<span class="hljs-built_in">sum</span>为<span class="hljs-number">0</span>。<br><span class="hljs-number">2</span>. 将大整数<span class="hljs-built_in">n</span>逐步取出最后两位数字，加到<span class="hljs-built_in">sum</span>中，直到<span class="hljs-built_in">n</span>变为<span class="hljs-number">0</span>为止。<br><span class="hljs-number">3</span>. 判断<span class="hljs-built_in">sum</span>能否被<span class="hljs-number">11</span>整除，如果能，则该大整数能被<span class="hljs-number">11</span>整除，否则不能。<br><br></code></pre><h3 id="习题5-5题"><a class="markdownIt-Anchor" href="#习题5-5题"></a> 习题5 - 5题</h3><p>设计一个算法，在数组r[n]中删除重复的元素，要求移动元素的次数较少，并使剩余元素间的相对次序保持不变</p><h4 id="代码-3"><a class="markdownIt-Anchor" href="#代码-3"></a> 代码</h4><pre class="highlight"><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">removeDuplicates</span><span class="hljs-params">(<span class="hljs-type">int</span> r[], <span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-type">int</span> i, j, k;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-keyword">for</span> (j = i + <span class="hljs-number">1</span>; j &lt; n;) &#123;<br>            <span class="hljs-keyword">if</span> (r[j] == r[i]) &#123;<br>                <span class="hljs-keyword">for</span> (k = j; k &lt; n - <span class="hljs-number">1</span>; k++) &#123;<br>                    r[k] = r[k + <span class="hljs-number">1</span>];<br>                &#125;<br>                n--;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                j++;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> r[] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>&#125;;<br>    <span class="hljs-type">int</span> n = <span class="hljs-built_in">sizeof</span>(r) / <span class="hljs-built_in">sizeof</span>(r[<span class="hljs-number">0</span>]);<br>    <span class="hljs-built_in">removeDuplicates</span>(r, n);<br>    cout &lt;&lt; <span class="hljs-string">&quot;After removing duplicates: &quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        cout &lt;&lt; r[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    cout &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre><h4 id="解释-3"><a class="markdownIt-Anchor" href="#解释-3"></a> 解释</h4><pre class="highlight"><code class="hljs excel">这段代码实现了一个删除数组中重复元素的算法。它通过循环遍历数组中的每一个元素，并与后面的元素进行比较，如果发现重复的元素，则将后面的元素依次向前移动一位，直到将重复的元素删除。为了减少移动元素的次数，代码从后往前移动元素。最终，剩余元素间的相对次序保持不变。<br><br>主函数中，我们定义了一个数组 r 和数组长度 <span class="hljs-built_in">n</span>，然后调用 removeDuplicates 函数，将重复元素删除。最后，输出删除重复元素后的数组。<br><br>该算法的时间复杂度为 O(<span class="hljs-built_in">n</span>^<span class="hljs-number">2</span>)，因为需要循环遍历数组中的每一个元素，并与后面的元素进行比较。如果数组中包含大量重复元素，这个算法的效率会很低。<br><br></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;简单算法练习&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#简单算法练习&quot;&gt;&lt;/a&gt; 简单算法练习&lt;/h1&gt;
&lt;h3 id=&quot;习题5-2&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#习题5-2&quot;&gt;&lt;/a&gt; </summary>
      
    
    
    
    <category term="文档区" scheme="http://uerlink.github.io/categories/%E6%96%87%E6%A1%A3%E5%8C%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>博客上传命令行测试</title>
    <link href="http://uerlink.github.io/2023/08/02/%E6%B5%8B%E8%AF%95%E5%8C%BA/2023-08-02_%E5%8D%9A%E5%AE%A2%E4%B8%8A%E4%BC%A0%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%B5%8B%E8%AF%95/"/>
    <id>http://uerlink.github.io/2023/08/02/%E6%B5%8B%E8%AF%95%E5%8C%BA/2023-08-02_%E5%8D%9A%E5%AE%A2%E4%B8%8A%E4%BC%A0%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%B5%8B%E8%AF%95/</id>
    <published>2023-08-01T16:00:00.000Z</published>
    <updated>2023-08-02T14:18:49.233Z</updated>
    
    <content type="html"><![CDATA[<h1 id="批处理bat命令行"><a class="markdownIt-Anchor" href="#批处理bat命令行"></a> 批处理BAT命令行</h1><pre class="highlight"><code class="hljs bash">@<span class="hljs-built_in">echo</span> off<br><br>chcp 65001<br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;▬▬▬▬▬▬▬▬▬▬▬▬▬▶ 已切换中文编码&quot;</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;▬▬▬▬▬▬▬▬▬▬▬▬▬▶ 清除缓存已禁用！如果博客样式出现问题，请重新开启&quot;</span><br><br><span class="hljs-built_in">cd</span> /d  D:\UerLinkBlog<br><br>title HexoGo<br><br><span class="hljs-built_in">cd</span><br><br>%call hexo clean%<br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;▬▬▬▬▬▬▬▬▬▬▬▬▬▶ 博客开始重新生成:&quot;</span><br><br>call hexo g<br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;▬▬▬▬▬▬▬▬▬▬▬▬▬▶ 博客开始上传GitHub:&quot;</span><br><br>call hexo d<br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;▬▬▬▬▬▬▬▬▬▬▬▬▬▶ 博客预览服务启动:&quot;</span><br><br>call hexo s<br><br>pause<br><br></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;批处理bat命令行&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#批处理bat命令行&quot;&gt;&lt;/a&gt; 批处理BAT命令行&lt;/h1&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;hljs bash&quot;&gt;@&lt;span </summary>
      
    
    
    
    <category term="测试区" scheme="http://uerlink.github.io/categories/%E6%B5%8B%E8%AF%95%E5%8C%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>博客上传常见问题</title>
    <link href="http://uerlink.github.io/2023/08/02/%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/2023-08-02_%E5%8D%9A%E5%AE%A2%E4%B8%8A%E4%BC%A0%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    <id>http://uerlink.github.io/2023/08/02/%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/2023-08-02_%E5%8D%9A%E5%AE%A2%E4%B8%8A%E4%BC%A0%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</id>
    <published>2023-08-01T16:00:00.000Z</published>
    <updated>2023-08-02T13:40:50.171Z</updated>
    
    <content type="html"><![CDATA[<h2 id="解决上传时提示warning-lf-will-be-replaced-by-crlf-in的方法"><a class="markdownIt-Anchor" href="#解决上传时提示warning-lf-will-be-replaced-by-crlf-in的方法"></a> 解决上传时提示warning: LF will be replaced by CRLF in的方法</h2><h4 id="原因"><a class="markdownIt-Anchor" href="#原因"></a> 原因</h4><p>不同操作系统行尾结束符不一样：</p><pre class="highlight"><code class="hljs bash">Uinx/Linux --- \n(LF); <br>windows --- \r\n(CRLF)<br></code></pre><h4 id="方法"><a class="markdownIt-Anchor" href="#方法"></a> 方法</h4><p>在git上配置core.autocrlf属性为false，默认为trun</p> <pre class="highlight"><code class="hljs bash">git config --get core.autocrlf   //查看命令<br><br>git config --global core.autocrlf <span class="hljs-literal">false</span>    //修改命令<br><br></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;解决上传时提示warning-lf-will-be-replaced-by-crlf-in的方法&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#解决上传时提示warning-lf-will-be-replaced-by-crlf-in的</summary>
      
    
    
    
    <category term="踩坑记录" scheme="http://uerlink.github.io/categories/%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="blog" scheme="http://uerlink.github.io/tags/blog/"/>
    
  </entry>
  
</feed>
